/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package avitoparser;

import javax.swing.JTextPane;
import static avitoparser.AvitoParser.frame2;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.SocketTimeoutException;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Properties;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.layout.Border;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JViewport;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author Potemkin
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnStart = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnSettings = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        btnAcceptFilter = new javax.swing.JButton();
        btnCanselFilter = new javax.swing.JButton();
        txtRequest = new javax.swing.JTextPane();
        jComboBox1 = new javax.swing.JComboBox();
        btnLoad = new javax.swing.JButton();
        btnPhrases = new javax.swing.JButton();
        btnWords = new javax.swing.JButton();
        jSorting = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnCityPlus = new javax.swing.JButton();
        btnCityMinus = new javax.swing.JButton();
        checkCityPlus = new javax.swing.JCheckBox();
        checkCityMinus = new javax.swing.JCheckBox();
        btnCompanyMinus = new javax.swing.JButton();
        btnCompanyPlus = new javax.swing.JButton();
        checkCompanyPlus = new javax.swing.JCheckBox();
        checkCompanyMinus = new javax.swing.JCheckBox();
        statusStr = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 0));
        setPreferredSize(new java.awt.Dimension(1024, 800));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        btnStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/start.jpg"))); // NOI18N
        btnStart.setEnabled(false);
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/stop.jpg"))); // NOI18N
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refresh.jpg"))); // NOI18N
        btnRefresh.setEnabled(false);
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/settings.jpg"))); // NOI18N
        btnSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettingsActionPerformed(evt);
            }
        });
        btnSettings.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnSettingsKeyReleased(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel1MouseEntered(evt);
            }
        });
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPanel1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jPanel1KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1338, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 254, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jPanel1);

        btnAcceptFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/accept.jpg"))); // NOI18N
        btnAcceptFilter.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnAcceptFilter.setVisible(false);
        btnAcceptFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptFilterActionPerformed(evt);
            }
        });
        btnAcceptFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                btnAcceptFilterKeyReleased(evt);
            }
        });

        btnCanselFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Cansel.jpg"))); // NOI18N
        btnCanselFilter.setVisible(false);
        btnCanselFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCanselFilterActionPerformed(evt);
            }
        });

        txtRequest.setVisible(false);
        txtRequest.setFont(new Font("TimesRoman", Font.PLAIN, 16));
        //txtRequest.setLineWrap(true);
        txtRequest.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRequestKeyReleased(evt);
            }
        });

        jComboBox1.setEditable(true);
        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Проект ещё не загружен" }));
        jComboBox1.setToolTipText("");
        jComboBox1.setFocusable(false);
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.setToolTipText("Текущий проект");

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnPhrases.setText("Фразы");
        btnPhrases.setEnabled(false);
        btnPhrases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPhrasesActionPerformed(evt);
            }
        });

        btnWords.setText("Минус слова");
        btnWords.setEnabled(false);
        btnWords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWordsActionPerformed(evt);
            }
        });

        jSorting.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Avito", "по дате", "по цене", "по дате и цене" }));
        jSorting.setEnabled(false);
        jSorting.setPreferredSize(new java.awt.Dimension(140, 22));
        jSorting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jSortingItemStateChanged(evt);
            }
        });

        jLabel2.setText("Компании:");

        jLabel1.setText("Города:");

        btnCityPlus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/plus.jpg"))); // NOI18N
        btnCityPlus.setEnabled(false);
        btnCityPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityPlusActionPerformed(evt);
            }
        });

        btnCityMinus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/minus.jpg"))); // NOI18N
        btnCityMinus.setEnabled(false);
        btnCityMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityMinusActionPerformed(evt);
            }
        });

        checkCityPlus.setSelected(true);
        checkCityPlus.setEnabled(false);
        checkCityPlus.setMargin(new java.awt.Insets(0, -3, 0, 0));

        checkCityMinus.setSelected(true);
        checkCityMinus.setEnabled(false);
        checkCityMinus.setMargin(new java.awt.Insets(2, -3, 2, 2));

        btnCompanyMinus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/minus.jpg"))); // NOI18N
        btnCompanyMinus.setEnabled(false);
        btnCompanyMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompanyMinusActionPerformed(evt);
            }
        });

        btnCompanyPlus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/plus.jpg"))); // NOI18N
        btnCompanyPlus.setEnabled(false);
        btnCompanyPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompanyPlusActionPerformed(evt);
            }
        });

        checkCompanyPlus.setSelected(true);
        checkCompanyPlus.setEnabled(false);
        checkCompanyPlus.setMargin(new java.awt.Insets(2, -3, 2, 2));

        checkCompanyMinus.setSelected(true);
        checkCompanyMinus.setEnabled(false);
        checkCompanyMinus.setMargin(new java.awt.Insets(2, -3, 2, 2));

        statusStr.setText("Status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLoad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, 0, 232, Short.MAX_VALUE)
                                .addGap(10, 10, 10)
                                .addComponent(btnPhrases)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnWords)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCityPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkCityPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCityMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkCityMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(3, 3, 3)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCompanyPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkCompanyPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnCompanyMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkCompanyMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSorting, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtRequest))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAcceptFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCanselFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(statusStr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(checkCityPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(checkCityMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(btnCityPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnCityMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnCompanyPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(checkCompanyPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnCompanyMinus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(checkCompanyMinus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnStart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnStop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnPhrases, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnWords, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1))
                            .addComponent(btnSettings, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSorting, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(5, 5, 5)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCanselFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAcceptFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRequest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusStr, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSorting.setToolTipText("Сортировать по");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:        
        /*пока наброски        
        */     
        btnStart.setEnabled(false);
        btnLoad.setEnabled(false);
        
        if(!isPaused)
        {
            btnStop.setEnabled(true);
            
            th=new Thread(new Runnable(){
                public void run(){
                    isFinished=false;
                    for(int i=0;i<paths.size();i++){
                        curProjPath=paths.get(i);
                        createrImgDirectories(curProjPath);
                        try {
                            initDataForCurProj(paths.get(i));                            
                            for(int j=0;j<urlsForCurProj.size();j++){                                
                                parser(urlsForCurProj.get(j),fromPage.get(j),toPage.get(j));
                            }                
                        } catch (IOException ex) {
                            System.out.println(ex);
                        }
                    }  
                    isFinished=true;
                    btnStop.setEnabled(false);
                    btnStart.setEnabled(true); // ДОБАВИЛ !!!
                    btnLoad.setEnabled(true); //Добавил!!! 
                }
            });
        th.start();                
        }else{
            if(!isFinished){
                th.resume();
                btnStop.setEnabled(true);
            }
        }
    }//GEN-LAST:event_btnStartActionPerformed
                
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        frame2.setPreferredSize(frame2.getSize());             
        if(!isResized&&isLoaded){
            //System.out.println("repaited2");
//            isResized=true;
            new Thread(new Runnable(){
                public void run(){
                    try {
                        isResized=true;
                        Thread.sleep(600);
                        isResized=false;
                        jPanel1.removeAll();
                        //updatePageRibbon();
                        jPanel1.add(Box.createVerticalStrut(25));
                        jPanel1.add(pageRibbon);
                        for(int i=currPageAdsForShow*settings.adsNumOnPage;
                               (i<adsForShow.size()&&i<currPageAdsForShow*settings.adsNumOnPage+settings.adsNumOnPage);
                                i++){
                            addItemToJPanel1(createNewPAll(adsForShow.get(i)));
                        }                      
                        //System.out.println("repaited");
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }).start();
        }
    }//GEN-LAST:event_formComponentResized

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:            
        JFileChooser dialog = new JFileChooser();
        dialog.setCurrentDirectory(new File(settings.lastPathToProjs));
        dialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        dialog.setMultiSelectionEnabled(true);
        dialog.showOpenDialog(this);
        File[] tempPaths=dialog.getSelectedFiles();
        if(tempPaths.length!=0)        
        {            
            paths=new ArrayList();
            for(int i=0;i<tempPaths.length;i++){
                paths.add(tempPaths[i].toString());
            }
            actionsAfterProjLoad();
            settings.lastPathToProjs=dialog.getCurrentDirectory().toString();
            settings.changeSettings();
            pack();            
        }
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // TODO add your handling code here        
        th.suspend();        
        isPaused=true;
        btnStart.setEnabled(true);
        btnStop.setEnabled(false);
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnPhrasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPhrasesActionPerformed
        // TODO add your handling code here:
        txtRequest.setVisible(true);
        btnAcceptFilter.setVisible(true);
        btnCanselFilter.setVisible(true);
        setMenuItemsVisible(false);
        
        String phrases="";
        try {
            phrases = phrasesLoader((String)jComboBox1.getSelectedItem());
            openedFileForRequest=(String)jComboBox1.getSelectedItem()+"\\_настройки\\фразы.txt";
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtRequest.setText(phrases);
        jComboBox1.setEnabled(false);        
        pack();
    }//GEN-LAST:event_btnPhrasesActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        frame2.setTitle((String)jComboBox1.getSelectedItem());
        if(permissionTojComboBox1ItemStateChange){
            try{
                plusCityStatic=plusCityLoader((String)jComboBox1.getSelectedItem());
                minusCityStatic=minusCityLoader((String)jComboBox1.getSelectedItem());
                plusWhatStatic=plusWhatLoader((String)jComboBox1.getSelectedItem());
                minusWhatStatic=minusWhatLoader((String)jComboBox1.getSelectedItem());
                minusWordsStatic=minusWordsLoader((String)jComboBox1.getSelectedItem());
                phrasesStatic=phrasesLoader((String)jComboBox1.getSelectedItem());
            }catch(Exception ex){
                
            }
            repaintAllAds();
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void btnWordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWordsActionPerformed
        // TODO add your handling code here:
        txtRequest.setVisible(true);
        btnAcceptFilter.setVisible(true);
        btnCanselFilter.setVisible(true);
        setMenuItemsVisible(false);
        
        String minusWords="";
        try {
            minusWords = minusWordsLoader((String)jComboBox1.getSelectedItem());
            openedFileForRequest=(String)jComboBox1.getSelectedItem()+"\\_настройки\\минус слова.txt";
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtRequest.setText(minusWords);
        jComboBox1.setEnabled(false);        
        pack();
    }//GEN-LAST:event_btnWordsActionPerformed

    private void btnAcceptFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptFilterActionPerformed
        // TODO add your handling code here:
        copyFile(openedFileForRequest, openedFileForRequest.substring(0,openedFileForRequest.length()-4)+"_Origin.txt");
        try {        
            saveFile(openedFileForRequest,txtRequest.getText());
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtRequest.setVisible(false);
        btnAcceptFilter.setVisible(false);
        btnCanselFilter.setVisible(false);
        setMenuItemsVisible(true);     
        jComboBox1.setEnabled(true);
        pack();
    }//GEN-LAST:event_btnAcceptFilterActionPerformed

    private void btnCanselFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCanselFilterActionPerformed
        // TODO add your handling code here:
        txtRequest.setVisible(false);
        btnAcceptFilter.setVisible(false);
        btnCanselFilter.setVisible(false);
        setMenuItemsVisible(true);  
        jComboBox1.setEnabled(true);
        pack();
    }//GEN-LAST:event_btnCanselFilterActionPerformed

    private void btnCityPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityPlusActionPerformed
        // TODO add your handling code here:
        txtRequest.setVisible(true);
        btnAcceptFilter.setVisible(true);
        btnCanselFilter.setVisible(true);
        setMenuItemsVisible(false);
        String plusCityStr="";
        ArrayList<String> plusCity=new ArrayList();
        try {
            plusCity = plusCityLoader((String)jComboBox1.getSelectedItem());
            openedFileForRequest=(String)jComboBox1.getSelectedItem()+"\\_настройки\\плюс города.txt";
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int i=0;i<plusCity.size();i++){
            if(i+1!=plusCity.size())plusCityStr+=plusCity.get(i)+"\n";
            else plusCityStr+=plusCity.get(i);
        }
        txtRequest.setText(plusCityStr);
        jComboBox1.setEnabled(false);
        pack();
    }//GEN-LAST:event_btnCityPlusActionPerformed

    private void btnCityMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityMinusActionPerformed
        // TODO add your handling code here:
        txtRequest.setVisible(true);
        btnAcceptFilter.setVisible(true);
        btnCanselFilter.setVisible(true);
        setMenuItemsVisible(false);
        String minusCityStr="";
        ArrayList<String> minusCity=new ArrayList();
        try {
            minusCity = minusCityLoader((String)jComboBox1.getSelectedItem());
            openedFileForRequest=(String)jComboBox1.getSelectedItem()+"\\_настройки\\минус города.txt";
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int i=0;i<minusCity.size();i++){
            if(i+1!=minusCity.size())minusCityStr+=minusCity.get(i)+"\n";
            else minusCityStr+=minusCity.get(i);
        }
        txtRequest.setText(minusCityStr);
        jComboBox1.setEnabled(false);
        pack();
    }//GEN-LAST:event_btnCityMinusActionPerformed

    private void btnCompanyPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompanyPlusActionPerformed
        // TODO add your handling code here:
        txtRequest.setVisible(true);
        btnAcceptFilter.setVisible(true);
        btnCanselFilter.setVisible(true);
        setMenuItemsVisible(false);
        String plusWhatStr="";
        ArrayList<String> plusWhat=new ArrayList();
        try {
            plusWhat = plusWhatLoader((String)jComboBox1.getSelectedItem());
            openedFileForRequest=(String)jComboBox1.getSelectedItem()+"\\_настройки\\плюс компании.txt";
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int i=0;i<plusWhat.size();i++){
            if(i+1!=plusWhat.size())plusWhatStr+=plusWhat.get(i)+"\n";
            else plusWhatStr+=plusWhat.get(i);
        }
        txtRequest.setText(plusWhatStr);
        jComboBox1.setEnabled(false);
        pack();
    }//GEN-LAST:event_btnCompanyPlusActionPerformed

    private void btnCompanyMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompanyMinusActionPerformed
        // TODO add your handling code here:
        txtRequest.setVisible(true);
        btnAcceptFilter.setVisible(true);
        btnCanselFilter.setVisible(true);
        setMenuItemsVisible(false);
        String minusWhatStr="";
        ArrayList<String> minusWhat=new ArrayList();
        try {
            minusWhat = minusWhatLoader((String)jComboBox1.getSelectedItem());
            openedFileForRequest=(String)jComboBox1.getSelectedItem()+"\\_настройки\\минус компании.txt";
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int i=0;i<minusWhat.size();i++){
            if(i+1!=minusWhat.size())minusWhatStr+=minusWhat.get(i)+"\n";
            else minusWhatStr+=minusWhat.get(i);
        }
        txtRequest.setText(minusWhatStr);
        jComboBox1.setEnabled(false);
        pack();
    }//GEN-LAST:event_btnCompanyMinusActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:                              
        isFilesChanged=true;
        try{
            plusCity=plusCityLoader((String)jComboBox1.getSelectedItem());
            minusCity=minusCityLoader((String)jComboBox1.getSelectedItem());
            plusWhat=plusWhatLoader((String)jComboBox1.getSelectedItem());
            minusWhat=minusWhatLoader((String)jComboBox1.getSelectedItem());
            minusWords=minusWordsLoader((String)jComboBox1.getSelectedItem());
            phrases=phrasesLoader((String)jComboBox1.getSelectedItem());
            isFilesChanged=true;
            
            plusCityStatic=plusCity;
            minusCityStatic=minusCity;
            plusWhatStatic=plusWhat;
            minusWhatStatic=minusWhat;
            minusWordsStatic=minusWords;
            phrasesStatic=phrases;
        }catch(Exception ex){
            
        }      
        repaintAllAds();     
        //adsSorter(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())));
        frame2.repaint();
        frame2.pack();           
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingsActionPerformed
        // TODO add your handling code here:    
    //Все переменные для настроек:
        //старые настройки:        
        //Color oldFrameBackColor=settings.frameBackColor;
        //Color oldJPanel1BackColor=settings.jPanel1BackColor;
        //новые настройки:
        Color[] newFrameBackColor=new Color[]{settings.frameBackColor};        
        Color[] newJPanel1BackColor=new Color[]{settings.jPanel1BackColor};
        Color[] newTxtDescriptBackColor=new Color[]{settings.txtDescriptBackColor};
        Color[] newTxtNameFontColor=new Color[]{settings.txtNameFontColor};
        Color[] newTxtYearFontColor=new Color[]{settings.txtYearFontColor};
        Color[] newTxtPriseFontColor=new Color[]{settings.txtPriseFontColor};
        Color[] newTxtWhatFontColor=new Color[]{settings.txtWhatFontColor};
        Color[] newTxtCityFontColor=new Color[]{settings.txtCityFontColor};
        Color[] newTxtDateFontColor=new Color[]{settings.txtDateFontColor};
        //int newAdsMarginLeft=settings.adsMarginLeft;
        
        JFrame settingsFrame = new JFrame();
        settingsFrame.setTitle("Настройки");
        
        JPanel pForSettings=new JPanel();
        pForSettings.setLayout(new BoxLayout(pForSettings, BoxLayout.X_AXIS)); 
        pForSettings.add(Box.createHorizontalStrut(50));
        
        JPanel pSettings = new JPanel();                        
        pSettings.setLayout(new BoxLayout(pSettings, BoxLayout.Y_AXIS)); 
        JScrollPane scrollPane = new JScrollPane(pForSettings);
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);
        /*JPanel pSettingItems = new JPanel();
        pSettingItems.setLayout(new BoxLayout(pSettingItems, BoxLayout.X_AXIS)); */
        //JColorChooser chooser=new JColorChooser();         
        //Кнопки "Сохранить и Отмена"
        JPanel pBtns=new JPanel();
        pBtns.setLayout(new BoxLayout(pBtns, BoxLayout.X_AXIS));         
        JButton btnAppend=new JButton("Сохранить");        
        JButton btnCansel=new JButton("Отмена");                
        pBtns.add(btnAppend);
        pBtns.add(Box.createHorizontalStrut(40));
        pBtns.add(btnCansel);
        //настройки цвета фона фрейма frame2
        JLabel lFrameBackColor=new JLabel("Цвет фона окна c кнопками: ");
        JButton btnFrameBackColor=new JButton("Выбрать");        
        btnFrameBackColor.setOpaque(true);        
        btnFrameBackColor.setBackground(newFrameBackColor[0]);        
        JPanel pFrameBackColor=new JPanel();
        pFrameBackColor.setLayout(new BoxLayout(pFrameBackColor, BoxLayout.X_AXIS));
        pFrameBackColor.add(lFrameBackColor);
        pFrameBackColor.add(Box.createHorizontalStrut(50));
        pFrameBackColor.add(Box.createHorizontalGlue());
        pFrameBackColor.add(btnFrameBackColor);
        
        //настройки цвета фона jPanel1 и его компонетов
        JLabel lJPanel1BackColor=new JLabel("Цвет фона окна с объявлениями: ");
        JButton btnJPanel1BackColor=new JButton("Выбрать");        
        btnJPanel1BackColor.setOpaque(true);              
        btnJPanel1BackColor.setBackground(newJPanel1BackColor[0]);        
        JPanel pJPanel1BackColor=new JPanel();
        pJPanel1BackColor.setLayout(new BoxLayout(pJPanel1BackColor, BoxLayout.X_AXIS));
        pJPanel1BackColor.add(lJPanel1BackColor);
        pJPanel1BackColor.add(Box.createHorizontalStrut(50));
        pJPanel1BackColor.add(Box.createHorizontalGlue());
        pJPanel1BackColor.add(btnJPanel1BackColor);    
        
        //настройки цвета фона текста в описании объявления
        JLabel lTxtDescriptBackColor=new JLabel("Цвет фона поля \"Описание\": ");
        JButton btnTxtDescriptBackColor=new JButton("Выбрать");        
        btnTxtDescriptBackColor.setOpaque(true);              
        btnTxtDescriptBackColor.setBackground(newTxtDescriptBackColor[0]);        
        JPanel pTxtDescriptBackColor=new JPanel();
        pTxtDescriptBackColor.setLayout(new BoxLayout(pTxtDescriptBackColor, BoxLayout.X_AXIS));
        pTxtDescriptBackColor.add(lTxtDescriptBackColor);
        pTxtDescriptBackColor.add(Box.createHorizontalStrut(50));
        pTxtDescriptBackColor.add(Box.createHorizontalGlue());
        pTxtDescriptBackColor.add(btnTxtDescriptBackColor);      
        
        //настройки цвета текста поля Имя
        JLabel lTxtNameFontColor=new JLabel("Цвет текста поля \"Заголовок\": ");
        JButton btnTxtNameFontColor=new JButton("Выбрать");        
        btnTxtNameFontColor.setOpaque(true);              
        btnTxtNameFontColor.setBackground(newTxtNameFontColor[0]);        
        JPanel pTxtNameFontColor=new JPanel();
        pTxtNameFontColor.setLayout(new BoxLayout(pTxtNameFontColor, BoxLayout.X_AXIS));
        pTxtNameFontColor.add(lTxtNameFontColor);
        pTxtNameFontColor.add(Box.createHorizontalStrut(50));
        pTxtNameFontColor.add(Box.createHorizontalGlue());
        pTxtNameFontColor.add(btnTxtNameFontColor); 
        
        //настройки цвета текста добавачного года
        JLabel lTxtYearFontColor=new JLabel("Цвет текста добавочного года: ");
        JButton btnTxtYearFontColor=new JButton("Выбрать");        
        btnTxtYearFontColor.setOpaque(true);              
        btnTxtYearFontColor.setBackground(newTxtYearFontColor[0]);        
        JPanel pTxtYearFontColor=new JPanel();
        pTxtYearFontColor.setLayout(new BoxLayout(pTxtYearFontColor, BoxLayout.X_AXIS));
        pTxtYearFontColor.add(lTxtYearFontColor);
        pTxtYearFontColor.add(Box.createHorizontalStrut(50));
        pTxtYearFontColor.add(Box.createHorizontalGlue());
        pTxtYearFontColor.add(btnTxtYearFontColor); 
        
        //настройки цвета текста поля Цена
        JLabel lTxtPriseFontColor=new JLabel("Цвет текста поля \"Цена\": ");
        JButton btnTxtPriseFontColor=new JButton("Выбрать");        
        btnTxtPriseFontColor.setOpaque(true);              
        btnTxtPriseFontColor.setBackground(newTxtPriseFontColor[0]);        
        JPanel pTxtPriseFontColor=new JPanel();
        pTxtPriseFontColor.setLayout(new BoxLayout(pTxtPriseFontColor, BoxLayout.X_AXIS));
        pTxtPriseFontColor.add(lTxtPriseFontColor);
        pTxtPriseFontColor.add(Box.createHorizontalStrut(50));
        pTxtPriseFontColor.add(Box.createHorizontalGlue());
        pTxtPriseFontColor.add(btnTxtPriseFontColor); 
        
        //настройки цвета текста поля Компания
        JLabel lTxtWhatFontColor=new JLabel("Цвет текста поля \"Компания\": ");
        JButton btnTxtWhatFontColor=new JButton("Выбрать");        
        btnTxtWhatFontColor.setOpaque(true);              
        btnTxtWhatFontColor.setBackground(newTxtWhatFontColor[0]);        
        JPanel pTxtWhatFontColor=new JPanel();
        pTxtWhatFontColor.setLayout(new BoxLayout(pTxtWhatFontColor, BoxLayout.X_AXIS));
        pTxtWhatFontColor.add(lTxtWhatFontColor);
        pTxtWhatFontColor.add(Box.createHorizontalStrut(50));
        pTxtWhatFontColor.add(Box.createHorizontalGlue());
        pTxtWhatFontColor.add(btnTxtWhatFontColor); 
        
        //настройки цвета текста поля Город
        JLabel lTxtCityFontColor=new JLabel("Цвет текста поля \"Город\": ");
        JButton btnTxtCityFontColor=new JButton("Выбрать");        
        btnTxtCityFontColor.setOpaque(true);              
        btnTxtCityFontColor.setBackground(newTxtCityFontColor[0]);        
        JPanel pTxtCityFontColor=new JPanel();
        pTxtCityFontColor.setLayout(new BoxLayout(pTxtCityFontColor, BoxLayout.X_AXIS));
        pTxtCityFontColor.add(lTxtCityFontColor);
        pTxtCityFontColor.add(Box.createHorizontalStrut(50));
        pTxtCityFontColor.add(Box.createHorizontalGlue());
        pTxtCityFontColor.add(btnTxtCityFontColor); 
        
        //настройки цвета текста поля Дата
        JLabel lTxtDateFontColor=new JLabel("Цвет текста поля \"Дата\": ");
        JButton btnTxtDateFontColor=new JButton("Выбрать");        
        btnTxtDateFontColor.setOpaque(true);              
        btnTxtDateFontColor.setBackground(newTxtDateFontColor[0]);        
        JPanel pTxtDateFontColor=new JPanel();
        pTxtDateFontColor.setLayout(new BoxLayout(pTxtDateFontColor, BoxLayout.X_AXIS));
        pTxtDateFontColor.add(lTxtDateFontColor);
        pTxtDateFontColor.add(Box.createHorizontalStrut(50));
        pTxtDateFontColor.add(Box.createHorizontalGlue());
        pTxtDateFontColor.add(btnTxtDateFontColor); 
        
        //настройки отступа блока объявлений от левого края панели
        JLabel lAdsMarginLeft=new JLabel("Отступ объявления слева: ");
        JTextField txtAdsMarginLeft=new JTextField(""+settings.adsMarginLeft);                                    
        JPanel pAdsMarginLeft=new JPanel();
        pAdsMarginLeft.setLayout(new BoxLayout(pAdsMarginLeft, BoxLayout.X_AXIS));
        pAdsMarginLeft.add(lAdsMarginLeft);
        pAdsMarginLeft.add(Box.createHorizontalStrut(100));
        pAdsMarginLeft.add(Box.createHorizontalGlue());
        pAdsMarginLeft.add(txtAdsMarginLeft); 
        
        //настройки отступа поля описания от правого края панели
        JLabel lAdsMarginRight=new JLabel("Отступ поля описания справа: ");
        JTextField txtAdsMarginRight=new JTextField(""+settings.adsMarginRight);                                    
        JPanel pAdsMarginRight=new JPanel();
        pAdsMarginRight.setLayout(new BoxLayout(pAdsMarginRight, BoxLayout.X_AXIS));
        pAdsMarginRight.add(lAdsMarginRight);
        pAdsMarginRight.add(Box.createHorizontalStrut(80));
        pAdsMarginRight.add(Box.createHorizontalGlue());
        pAdsMarginRight.add(txtAdsMarginRight); 
        
        //настройки расстояния между объявлениями.
        JLabel lDistBtvAds=new JLabel("Расстояние между объявлениями: ");
        JTextField txtDistBtvAds=new JTextField(""+settings.distBtvAds);                                    
        JPanel pDistBtvAds=new JPanel();
        pDistBtvAds.setLayout(new BoxLayout(pDistBtvAds, BoxLayout.X_AXIS));
        pDistBtvAds.add(lDistBtvAds);
        pDistBtvAds.add(Box.createHorizontalStrut(55));
        pDistBtvAds.add(Box.createHorizontalGlue());
        pDistBtvAds.add(txtDistBtvAds); 
        
        //настройки отступа текста от картинки.
        JLabel lMarginTextFromPict=new JLabel("Отступ текста от картинки: ");
        JTextField txtMarginTextFromPict=new JTextField(""+settings.marginTextFromPict);                                    
        JPanel pMarginTextFromPict=new JPanel();
        pMarginTextFromPict.setLayout(new BoxLayout(pMarginTextFromPict, BoxLayout.X_AXIS));
        pMarginTextFromPict.add(lMarginTextFromPict);
        pMarginTextFromPict.add(Box.createHorizontalStrut(106));
        pMarginTextFromPict.add(Box.createHorizontalGlue());
        pMarginTextFromPict.add(txtMarginTextFromPict); 
        
        //настройки отступа между пунктами объявления.
        JLabel lDistBtvAdsItems=new JLabel("Отступ между пунктами объявления: ");
        JTextField txtDistBtvAdsItems=new JTextField(""+settings.distBtvAdsItems);                                    
        JPanel pDistBtvAdsItems=new JPanel();
        pDistBtvAdsItems.setLayout(new BoxLayout(pDistBtvAdsItems, BoxLayout.X_AXIS));
        pDistBtvAdsItems.add(lDistBtvAdsItems);
        pDistBtvAdsItems.add(Box.createHorizontalStrut(45));
        pDistBtvAdsItems.add(Box.createHorizontalGlue());
        pDistBtvAdsItems.add(txtDistBtvAdsItems); 
        
        //настройка метода сортировки годов
        JLabel lSortYearsMetod=new JLabel("Как сортировать добавочные года: ");
        JComboBox comboSortYearsMetod=new JComboBox();
        comboSortYearsMetod.addItem("По убыванию");
        comboSortYearsMetod.addItem("По возрастанию");
        comboSortYearsMetod.setSelectedItem(settings.yearsSorterMetod);
        JPanel pSortYearsMetod=new JPanel();
        pSortYearsMetod.setLayout(new BoxLayout(pSortYearsMetod, BoxLayout.X_AXIS));
        pSortYearsMetod.add(lSortYearsMetod);      
        //pSortYearsMetod.add(Box.createHorizontalStrut(210));        
        pSortYearsMetod.add(Box.createHorizontalGlue());
        pSortYearsMetod.add(comboSortYearsMetod); 
        
        //настройка вывода объявлений в которых можно написать продавцу
        JLabel lShowOnlyIfWriteLetterIsAvailable=new JLabel("Показывать только те, где можно написать продавцу: ");        
        JCheckBox checkShowOnlyIfWriteLetterIsAvailable=new JCheckBox();
        if(settings.showOnlyIfWriteLetterIsAvailable){
            checkShowOnlyIfWriteLetterIsAvailable.setSelected(true);
        }else{
            checkShowOnlyIfWriteLetterIsAvailable.setSelected(false);
        }        
        JPanel pShowOnlyIfWriteLetterIsAvailable=new JPanel();
        pShowOnlyIfWriteLetterIsAvailable.setLayout(new BoxLayout(pShowOnlyIfWriteLetterIsAvailable, BoxLayout.X_AXIS));
        pShowOnlyIfWriteLetterIsAvailable.add(lShowOnlyIfWriteLetterIsAvailable);
        pShowOnlyIfWriteLetterIsAvailable.add(Box.createHorizontalStrut(20));
        pShowOnlyIfWriteLetterIsAvailable.add(Box.createHorizontalGlue());
        pShowOnlyIfWriteLetterIsAvailable.add(checkShowOnlyIfWriteLetterIsAvailable); 
        
        //настройка шрифтов:
        String[] fontNames=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();         
        JLabel lNameFont = new JLabel ("Шрифт поля \"Заголовок\":         ");
        JButton btnNameFont=new JButton(settings.nameFont.getFamily());
        JTextField txtNameFontSize=new JTextField();
        if(settings.nameFont!=null){
            txtNameFontSize.setText(Integer.toString(settings.nameFont.getSize()));                        
        }
        JComboBox comboNameFontStyle=new JComboBox();
        comboNameFontStyle.addItem("Обычный");
        comboNameFontStyle.addItem("Жирный");
        comboNameFontStyle.addItem("Курсив");
        comboNameFontStyle.addItem("Жирный курсив");
        if(settings.nameFont!=null){
            comboNameFontStyle.setSelectedIndex(settings.nameFont.getStyle());
        }
        JPanel pNameFont=new JPanel();
        pNameFont.setLayout(new BoxLayout(pNameFont, BoxLayout.X_AXIS));
        pNameFont.add(lNameFont);
        //pNameFont.add(Box.createHorizontalGlue());
        pNameFont.add(Box.createHorizontalStrut(18));        
        pNameFont.add(btnNameFont);
        pNameFont.add(Box.createHorizontalStrut(5));
        pNameFont.add(txtNameFontSize);
        pNameFont.add(Box.createHorizontalStrut(5));
        pNameFont.add(comboNameFontStyle);        
        
        //настройка шрифта цены                        
        JLabel lPriseFont = new JLabel ("Шрифт поля \"Цена\":           ");
        JButton btnPriseFont=new JButton(settings.priseFont.getFamily());
        JTextField txtPriseFontSize=new JTextField();
        if(settings.priseFont!=null){
            txtPriseFontSize.setText(Integer.toString(settings.priseFont.getSize()));
        }
        JComboBox comboPriseFontStyle=new JComboBox();
        comboPriseFontStyle.addItem("Обычный");
        comboPriseFontStyle.addItem("Жирный");
        comboPriseFontStyle.addItem("Курсив");
        comboPriseFontStyle.addItem("Жирный курсив");
        if(settings.priseFont!=null){
            comboPriseFontStyle.setSelectedIndex(settings.priseFont.getStyle());
        }
        JPanel pPriseFont=new JPanel();
        pPriseFont.setLayout(new BoxLayout(pPriseFont, BoxLayout.X_AXIS));
        pPriseFont.add(lPriseFont);        
        pPriseFont.add(Box.createHorizontalStrut(44));
        pPriseFont.add(btnPriseFont);
        pPriseFont.add(Box.createHorizontalStrut(5));
        pPriseFont.add(txtPriseFontSize);
        pPriseFont.add(Box.createHorizontalStrut(5));
        pPriseFont.add(comboPriseFontStyle);        
        
        //настройка шрифта города                
        JLabel lCityFont = new JLabel ("Шрифт поля \"Город\":           ");
        JButton btnCityFont=new JButton(settings.cityFont.getFamily());
        JTextField txtCityFontSize=new JTextField();
        if(settings.cityFont!=null){
            txtCityFontSize.setText(Integer.toString(settings.cityFont.getSize()));
        }
        JComboBox comboCityFontStyle=new JComboBox();
        comboCityFontStyle.addItem("Обычный");
        comboCityFontStyle.addItem("Жирный");
        comboCityFontStyle.addItem("Курсив");
        comboCityFontStyle.addItem("Жирный курсив");
        if(settings.cityFont!=null){
            comboCityFontStyle.setSelectedIndex(settings.cityFont.getStyle());
        }
        JPanel pCityFont=new JPanel();
        pCityFont.setLayout(new BoxLayout(pCityFont, BoxLayout.X_AXIS));
        pCityFont.add(lCityFont);
        pCityFont.add(Box.createHorizontalStrut(38));
        pCityFont.add(btnCityFont);
        pCityFont.add(Box.createHorizontalStrut(5));
        pCityFont.add(txtCityFontSize);
        pCityFont.add(Box.createHorizontalStrut(5));
        pCityFont.add(comboCityFontStyle);       
        
        //настройка шрифта компании              
        JLabel lWhatFont = new JLabel ("Шрифт поля \"Компания\":        ");
        JButton btnWhatFont=new JButton(settings.whatFont.getFamily());
        JTextField txtWhatFontSize=new JTextField();
        if(settings.whatFont!=null){
            txtWhatFontSize.setText(Integer.toString(settings.whatFont.getSize()));
        }
        JComboBox comboWhatFontStyle=new JComboBox();
        comboWhatFontStyle.addItem("Обычный");
        comboWhatFontStyle.addItem("Жирный");
        comboWhatFontStyle.addItem("Курсив");
        comboWhatFontStyle.addItem("Жирный курсив");
        if(settings.whatFont!=null){
            comboWhatFontStyle.setSelectedIndex(settings.whatFont.getStyle());
        }
        JPanel pWhatFont=new JPanel();
        pWhatFont.setLayout(new BoxLayout(pWhatFont, BoxLayout.X_AXIS));
        pWhatFont.add(lWhatFont);
        pWhatFont.add(Box.createHorizontalStrut(26));
        pWhatFont.add(btnWhatFont);
        pWhatFont.add(Box.createHorizontalStrut(5));
        pWhatFont.add(txtWhatFontSize);
        pWhatFont.add(Box.createHorizontalStrut(5));
        pWhatFont.add(comboWhatFontStyle);   
        
        //настройка шрифта даты                
        JLabel lDateFont = new JLabel ("Шрифт поля \"Дата\":            ");
        JButton btnDateFont=new JButton(settings.dateFont.getFamily());
        JTextField txtDateFontSize=new JTextField();
        if(settings.dateFont!=null){
            txtDateFontSize.setText(Integer.toString(settings.dateFont.getSize()));
        }
        JComboBox comboDateFontStyle=new JComboBox();
        comboDateFontStyle.addItem("Обычный");
        comboDateFontStyle.addItem("Жирный");
        comboDateFontStyle.addItem("Курсив");
        comboDateFontStyle.addItem("Жирный курсив");
        if(settings.dateFont!=null){
            comboDateFontStyle.setSelectedIndex(settings.dateFont.getStyle());
        }
        JPanel pDateFont=new JPanel();
        pDateFont.setLayout(new BoxLayout(pDateFont, BoxLayout.X_AXIS));
        pDateFont.add(lDateFont);
        pDateFont.add(Box.createHorizontalStrut(43));
        pDateFont.add(btnDateFont);
        pDateFont.add(Box.createHorizontalStrut(5));
        pDateFont.add(txtDateFontSize);
        pDateFont.add(Box.createHorizontalStrut(5));
        pDateFont.add(comboDateFontStyle);  
        
        //настройка шрифта года                
        JLabel lYearFont = new JLabel ("Шрифт \"Добавочных годов\":         ");
        JButton btnYearFont=new JButton(settings.yearFont.getFamily());
        JTextField txtYearFontSize=new JTextField();
        if(settings.yearFont!=null){
            txtYearFontSize.setText(Integer.toString(settings.yearFont.getSize()));
        }
        JComboBox comboYearFontStyle=new JComboBox();
        comboYearFontStyle.addItem("Обычный");
        comboYearFontStyle.addItem("Жирный");
        comboYearFontStyle.addItem("Курсив");
        comboYearFontStyle.addItem("Жирный курсив");
        if(settings.yearFont!=null){
            comboYearFontStyle.setSelectedIndex(settings.yearFont.getStyle());
        }
        JPanel pYearFont=new JPanel();
        pYearFont.setLayout(new BoxLayout(pYearFont, BoxLayout.X_AXIS));
        pYearFont.add(lYearFont);
        //pYearFont.add(Box.createHorizontalGlue());
        pYearFont.add(Box.createHorizontalStrut(0));
        pYearFont.add(btnYearFont);
        pYearFont.add(Box.createHorizontalStrut(5));
        pYearFont.add(txtYearFontSize);
        pYearFont.add(Box.createHorizontalStrut(5));
        pYearFont.add(comboYearFontStyle);   
        
        //настройка шрифта описания            
        JLabel lDescriptFont = new JLabel ("Шрифт поля \"Описание\":    ");
        JButton btnDescriptFont=new JButton(settings.descriptFont.getFamily());
        JTextField txtDescriptFontSize=new JTextField();
        if(settings.descriptFont!=null){
            txtDescriptFontSize.setText(Integer.toString(settings.descriptFont.getSize()));
        }
        JComboBox comboDescriptFontStyle=new JComboBox();
        comboDescriptFontStyle.addItem("Обычный");
        comboDescriptFontStyle.addItem("Жирный");
        comboDescriptFontStyle.addItem("Курсив");
        comboDescriptFontStyle.addItem("Жирный курсив");
        if(settings.descriptFont!=null){
            comboDescriptFontStyle.setSelectedIndex(settings.descriptFont.getStyle());
        }
        JPanel pDescriptFont=new JPanel();
        pDescriptFont.setLayout(new BoxLayout(pDescriptFont, BoxLayout.X_AXIS));
        pDescriptFont.add(lDescriptFont);
        pDescriptFont.add(Box.createHorizontalStrut(38));
        pDescriptFont.add(btnDescriptFont);
        pDescriptFont.add(Box.createHorizontalStrut(5));
        pDescriptFont.add(txtDescriptFontSize);
        pDescriptFont.add(Box.createHorizontalStrut(5));
        pDescriptFont.add(comboDescriptFontStyle);   
        
        //Настройка задержки между парсингом
        JLabel lParsingDelay = new JLabel ("Диапазон задержки между заходом в объявления  (сек.):");        
        JLabel lFrom = new JLabel ("от ");        
        JLabel lTo = new JLabel ("до ");        
        JTextField delayFrom=new JTextField(""+settings.delayFrom);
        JTextField delayTo=new JTextField(""+settings.delayTo);
        JPanel pParsingDelay=new JPanel();
        pParsingDelay.setLayout(new BoxLayout(pParsingDelay, BoxLayout.X_AXIS));
        pParsingDelay.add(lParsingDelay);
        pParsingDelay.add(Box.createHorizontalStrut(10));
        pParsingDelay.add(lFrom);
        pParsingDelay.add(delayFrom);
        pParsingDelay.add(Box.createHorizontalStrut(5));
        pParsingDelay.add(lTo);
        pParsingDelay.add(delayTo);
        
        //Задержка до появления окна описания
        JLabel lDelayDescriptShow=new JLabel("Задержка до появления текста описания (ms): ");
        JTextField txtDelayDescriptShow=new JTextField(""+settings.delayDescriptShow);                                    
        JPanel pDelayDescriptShow=new JPanel();
        pDelayDescriptShow.setLayout(new BoxLayout(pDelayDescriptShow, BoxLayout.X_AXIS));
        pDelayDescriptShow.add(lDelayDescriptShow);
        pDelayDescriptShow.add(Box.createHorizontalStrut(45));
        pDelayDescriptShow.add(Box.createHorizontalGlue());
        pDelayDescriptShow.add(txtDelayDescriptShow); 
        
        //Задержка до появления картинки
        JLabel lDelayImgShow=new JLabel("Задержка до увеличения картинки (ms): ");
        JTextField txtDelayImgShow=new JTextField(""+settings.delayImgShow);                                    
        JPanel pDelayImgShow=new JPanel();
        pDelayImgShow.setLayout(new BoxLayout(pDelayImgShow, BoxLayout.X_AXIS));
        pDelayImgShow.add(lDelayImgShow);
        pDelayImgShow.add(Box.createHorizontalStrut(83));
        pDelayImgShow.add(Box.createHorizontalGlue());
        pDelayImgShow.add(txtDelayImgShow); 
        
        //Шаг скроллинга
        JLabel lScrollStep=new JLabel("Шаг скроллинга: ");
        JTextField txtScrollStep=new JTextField(""+settings.scrollStep);                                    
        JPanel pScrollStep=new JPanel();
        pScrollStep.setLayout(new BoxLayout(pScrollStep, BoxLayout.X_AXIS));
        pScrollStep.add(lScrollStep);
        pScrollStep.add(Box.createHorizontalStrut(83));
        pScrollStep.add(Box.createHorizontalGlue());
        pScrollStep.add(txtScrollStep); 
        
        //Количество объявлений на странице
        JLabel lAdsNumOnPage=new JLabel("Количество объявлений на странице: ");
        JTextField txtAdsNumOnPage=new JTextField(""+settings.adsNumOnPage);                                    
        JPanel pAdsNumOnPage=new JPanel();
        pAdsNumOnPage.setLayout(new BoxLayout(pAdsNumOnPage, BoxLayout.X_AXIS));
        pAdsNumOnPage.add(lAdsNumOnPage);
        pAdsNumOnPage.add(Box.createHorizontalStrut(83));
        pAdsNumOnPage.add(Box.createHorizontalGlue());
        pAdsNumOnPage.add(txtAdsNumOnPage); 
        
        //добавляю всё на панель pSettings и затем его во фрейм
        //JScrollPane sccrollSettings=new JScrollPane(pSettings);
        pSettings.add(Box.createVerticalStrut(25));
        pSettings.add(pFrameBackColor);
        pSettings.add(Box.createVerticalStrut(25));
        
        pSettings.add(pJPanel1BackColor);
        pSettings.add(Box.createVerticalStrut(25));
        
        pSettings.add(pTxtDescriptBackColor);
        pSettings.add(Box.createVerticalStrut(25));
        
        pSettings.add(pTxtNameFontColor);
        pSettings.add(Box.createVerticalStrut(25));
        
        pSettings.add(pTxtYearFontColor);
        pSettings.add(Box.createVerticalStrut(25));
        
        pSettings.add(pTxtPriseFontColor);
        pSettings.add(Box.createVerticalStrut(25));
        
        pSettings.add(pTxtWhatFontColor);
        pSettings.add(Box.createVerticalStrut(25));
        
        pSettings.add(pTxtCityFontColor);
        pSettings.add(Box.createVerticalStrut(25));
        
        pSettings.add(pTxtDateFontColor);
        pSettings.add(Box.createVerticalStrut(25));
        
        pSettings.add(pAdsMarginLeft);
        pSettings.add(Box.createVerticalStrut(10));
        
        pSettings.add(pAdsMarginRight);
        pSettings.add(Box.createVerticalStrut(10));
        
        pSettings.add(pDistBtvAds);
        pSettings.add(Box.createVerticalStrut(10));
        
        pSettings.add(pMarginTextFromPict);
        pSettings.add(Box.createVerticalStrut(10));
        
        pSettings.add(pDistBtvAdsItems);
        pSettings.add(Box.createVerticalStrut(25));
        
        pSettings.add(pSortYearsMetod);
        pSettings.add(Box.createVerticalStrut(25));
        
        pSettings.add(pShowOnlyIfWriteLetterIsAvailable);
        pSettings.add(Box.createVerticalStrut(25));                  
        
        pSettings.add(pNameFont);
        pSettings.add(Box.createVerticalStrut(10));  
        
        pSettings.add(pYearFont);
        pSettings.add(Box.createVerticalStrut(10)); 
        
        pSettings.add(pPriseFont);
        pSettings.add(Box.createVerticalStrut(10));  
        
        pSettings.add(pWhatFont);
        pSettings.add(Box.createVerticalStrut(10)); 
        
        pSettings.add(pCityFont);
        pSettings.add(Box.createVerticalStrut(10)); 
                        
        pSettings.add(pDateFont);
        pSettings.add(Box.createVerticalStrut(10));         
        
        pSettings.add(pDescriptFont);
        pSettings.add(Box.createVerticalStrut(25)); 
        
        pSettings.add(pParsingDelay);
        pSettings.add(Box.createVerticalStrut(25)); 
        
        pSettings.add(pDelayDescriptShow);
        pSettings.add(Box.createVerticalStrut(10)); 
        
        pSettings.add(pDelayImgShow);
        pSettings.add(Box.createVerticalStrut(25)); 
        
        pSettings.add(pScrollStep);
        pSettings.add(Box.createVerticalStrut(25)); 
        
        pSettings.add(pAdsNumOnPage);
        pSettings.add(Box.createVerticalStrut(25));         
        
        pSettings.add(pBtns);
        
        pForSettings.add(pSettings);
        pForSettings.add(Box.createHorizontalStrut(50));
        
        settingsFrame.add(scrollPane);  
        settingsFrame.setPreferredSize(new Dimension(620,600));
        settingsFrame.pack();
        settingsFrame.setVisible(true);        
                
        btnFrameBackColor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){               
               Color temp=JColorChooser.showDialog(settingsFrame, "Choose!", newFrameBackColor[0]);                                              
               if(temp!=null)newFrameBackColor[0]=temp;                                                   
               btnFrameBackColor.setBackground(newFrameBackColor[0]);
               pack();
            }
        });
        btnJPanel1BackColor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                Color temp=JColorChooser.showDialog(settingsFrame, "Choose!", newJPanel1BackColor[0]);                                              
                if(temp!=null)newJPanel1BackColor[0]=temp;                                   
                btnJPanel1BackColor.setBackground(newJPanel1BackColor[0]);                
                pack();
            }
        });
        btnTxtDescriptBackColor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                Color temp=JColorChooser.showDialog(settingsFrame, "Choose!", newTxtDescriptBackColor[0]);                                              
                if(temp!=null)newTxtDescriptBackColor[0]=temp;                                   
                btnTxtDescriptBackColor.setBackground(newTxtDescriptBackColor[0]);                
                pack();
            }
        });
        btnTxtNameFontColor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                Color temp=JColorChooser.showDialog(settingsFrame, "Choose!", newTxtNameFontColor[0]);                                              
                if(temp!=null)newTxtNameFontColor[0]=temp;                                   
                btnTxtNameFontColor.setBackground(newTxtNameFontColor[0]);                
                pack();
            }
        });        
        btnTxtYearFontColor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                Color temp=JColorChooser.showDialog(settingsFrame, "Choose!", newTxtYearFontColor[0]);                                              
                if(temp!=null)newTxtYearFontColor[0]=temp;                                   
                btnTxtYearFontColor.setBackground(newTxtYearFontColor[0]);                
                pack();
            }
        });
        btnTxtPriseFontColor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                Color temp=JColorChooser.showDialog(settingsFrame, "Choose!", newTxtPriseFontColor[0]);                                              
                if(temp!=null)newTxtPriseFontColor[0]=temp;                                   
                btnTxtPriseFontColor.setBackground(newTxtPriseFontColor[0]);                
                pack();
            }
        });
        btnTxtWhatFontColor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                Color temp=JColorChooser.showDialog(settingsFrame, "Choose!", newTxtWhatFontColor[0]);                                              
                if(temp!=null)newTxtWhatFontColor[0]=temp;                                   
                btnTxtWhatFontColor.setBackground(newTxtWhatFontColor[0]);                
                pack();
            }
        });    
        btnTxtCityFontColor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                Color temp=JColorChooser.showDialog(settingsFrame, "Choose!", newTxtCityFontColor[0]);                                              
                if(temp!=null)newTxtCityFontColor[0]=temp;                                   
                btnTxtCityFontColor.setBackground(newTxtCityFontColor[0]);                
                pack();
            }
        });  
        btnTxtDateFontColor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                Color temp=JColorChooser.showDialog(settingsFrame, "Choose!", newTxtDateFontColor[0]);                                              
                if(temp!=null)newTxtDateFontColor[0]=temp;                                   
                btnTxtDateFontColor.setBackground(newTxtDateFontColor[0]);                
                pack();
            }
        });  
        btnNameFont.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                JFrame frame=new JFrame();
                JPanel panel=new JPanel();
                JScrollPane scroll=new JScrollPane(panel);
                scroll.getVerticalScrollBar().setUnitIncrement(16);
                panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
                String[] fontNames=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();        
                JTextField[] txtField=new JTextField[fontNames.length];                                
                int[] i=new int[1];
                int[] currentFieldIndex=new int[1];
                for(i[0]=0;i[0]<fontNames.length;i[0]++){
                    txtField[i[0]]=new JTextField();
                    txtField[i[0]].setText("Вот так выглядит текст, начертанный шрифтом "+fontNames[i[0]]);
                    txtField[i[0]].setFont(new Font(fontNames[i[0]], comboNameFontStyle.getSelectedIndex(), Integer.parseInt(txtNameFontSize.getText())));
                    if(fontNames[i[0]].equals(btnNameFont.getText())){
                        currentFieldIndex[0]=i[0];
                        txtField[currentFieldIndex[0]].setBackground(Color.YELLOW);
                    }
                    txtField[i[0]].addMouseListener(new java.awt.event.MouseAdapter() {                      
                        int index=i[0];                        
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            btnNameFont.setText(fontNames[index]);
                            txtField[currentFieldIndex[0]].setBackground(Color.WHITE);
                            currentFieldIndex[0]=index;
                            txtField[index].setBackground(Color.YELLOW);
                            settings.nameFont=new Font(fontNames[index],
                                            comboNameFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtNameFontSize.getText()));
                            repaintAllAds();
                        }                        
                    });
                    panel.add(txtField[i[0]]);                           
                }                              
                frame.add(scroll);
                frame.setBounds(settingsFrame.getX()+settingsFrame.getWidth(),settingsFrame.getY(), 600, 600);
                frame.setPreferredSize(new Dimension(600,600));
                frame.pack();
                frame.setVisible(true);
            }
        });  
        btnPriseFont.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                JFrame frame=new JFrame();
                JPanel panel=new JPanel();
                JScrollPane scroll=new JScrollPane(panel);
                scroll.getVerticalScrollBar().setUnitIncrement(16);
                panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
                String[] fontNames=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();        
                JTextField[] txtField=new JTextField[fontNames.length];                                
                int[] i=new int[1];
                int[] currentFieldIndex=new int[1];
                for(i[0]=0;i[0]<fontNames.length;i[0]++){
                    txtField[i[0]]=new JTextField();
                    txtField[i[0]].setText("Вот так выглядит текст, начертанный шрифтом "+fontNames[i[0]]);
                    txtField[i[0]].setFont(new Font(fontNames[i[0]], comboPriseFontStyle.getSelectedIndex(), Integer.parseInt(txtPriseFontSize.getText())));
                    if(fontNames[i[0]].equals(btnPriseFont.getText())){
                        currentFieldIndex[0]=i[0];
                        txtField[currentFieldIndex[0]].setBackground(Color.YELLOW);
                    }
                    txtField[i[0]].addMouseListener(new java.awt.event.MouseAdapter() {                      
                        int index=i[0];
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            btnPriseFont.setText(fontNames[index]);
                            txtField[currentFieldIndex[0]].setBackground(Color.WHITE);
                            currentFieldIndex[0]=index;
                            txtField[index].setBackground(Color.YELLOW);
                            settings.priseFont=new Font(fontNames[index],
                                            comboPriseFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtPriseFontSize.getText()));
                            repaintAllAds();
                        }                        
                    });
                    panel.add(txtField[i[0]]);                           
                }                               
                frame.add(scroll);
                frame.setBounds(settingsFrame.getX()+settingsFrame.getWidth(),settingsFrame.getY(), 600, 600);
                frame.setPreferredSize(new Dimension(600,600));
                frame.pack();
                frame.setVisible(true);
            }
        }); 
        btnCityFont.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                JFrame frame=new JFrame();
                JPanel panel=new JPanel();
                JScrollPane scroll=new JScrollPane(panel);
                scroll.getVerticalScrollBar().setUnitIncrement(16);
                panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
                String[] fontNames=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();        
                JTextField[] txtField=new JTextField[fontNames.length];                                
                int[] i=new int[1];
                int[] currentFieldIndex=new int[1];
                for(i[0]=0;i[0]<fontNames.length;i[0]++){
                    txtField[i[0]]=new JTextField();
                    txtField[i[0]].setText("Вот так выглядит текст, начертанный шрифтом "+fontNames[i[0]]);
                    txtField[i[0]].setFont(new Font(fontNames[i[0]], comboCityFontStyle.getSelectedIndex(), Integer.parseInt(txtCityFontSize.getText())));
                    if(fontNames[i[0]].equals(btnCityFont.getText())){
                        currentFieldIndex[0]=i[0];
                        txtField[currentFieldIndex[0]].setBackground(Color.YELLOW);
                    }
                    txtField[i[0]].addMouseListener(new java.awt.event.MouseAdapter() {                      
                        int index=i[0];
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            btnCityFont.setText(fontNames[index]);
                            txtField[currentFieldIndex[0]].setBackground(Color.WHITE);
                            currentFieldIndex[0]=index;
                            txtField[index].setBackground(Color.YELLOW);
                            settings.cityFont=new Font(fontNames[index],
                                            comboCityFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtCityFontSize.getText()));
                            repaintAllAds();
                        }                        
                    });
                    panel.add(txtField[i[0]]);                           
                }                               
                frame.add(scroll);
                frame.setBounds(settingsFrame.getX()+settingsFrame.getWidth(),settingsFrame.getY(), 600, 600);
                frame.setPreferredSize(new Dimension(600,600));
                frame.pack();
                frame.setVisible(true);
            }
        }); 
        btnWhatFont.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                JFrame frame=new JFrame();
                JPanel panel=new JPanel();
                JScrollPane scroll=new JScrollPane(panel);
                scroll.getVerticalScrollBar().setUnitIncrement(16);
                panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
                String[] fontNames=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();        
                JTextField[] txtField=new JTextField[fontNames.length];                                
                int[] i=new int[1];
                int[] currentFieldIndex=new int[1];
                for(i[0]=0;i[0]<fontNames.length;i[0]++){
                    txtField[i[0]]=new JTextField();
                    txtField[i[0]].setText("Вот так выглядит текст, начертанный шрифтом "+fontNames[i[0]]);
                    txtField[i[0]].setFont(new Font(fontNames[i[0]], comboWhatFontStyle.getSelectedIndex(), Integer.parseInt(txtWhatFontSize.getText())));
                    if(fontNames[i[0]].equals(btnWhatFont.getText())){
                        currentFieldIndex[0]=i[0];
                        txtField[currentFieldIndex[0]].setBackground(Color.YELLOW);
                    }
                    txtField[i[0]].addMouseListener(new java.awt.event.MouseAdapter() {                      
                        int index=i[0];
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            btnWhatFont.setText(fontNames[index]);
                            txtField[currentFieldIndex[0]].setBackground(Color.WHITE);
                            currentFieldIndex[0]=index;
                            txtField[index].setBackground(Color.YELLOW);
                            settings.whatFont=new Font(fontNames[index],
                                            comboWhatFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtWhatFontSize.getText()));
                            repaintAllAds();
                        }                        
                    });
                    panel.add(txtField[i[0]]);                           
                }                               
                frame.add(scroll);
                frame.setBounds(settingsFrame.getX()+settingsFrame.getWidth(),settingsFrame.getY(), 600, 600);
                frame.setPreferredSize(new Dimension(600,600));
                frame.pack();
                frame.setVisible(true);
            }
        }); 
        btnDateFont.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                JFrame frame=new JFrame();
                JPanel panel=new JPanel();
                JScrollPane scroll=new JScrollPane(panel);
                scroll.getVerticalScrollBar().setUnitIncrement(16);
                panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
                String[] fontNames=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();        
                JTextField[] txtField=new JTextField[fontNames.length];                                
                int[] i=new int[1];
                int[] currentFieldIndex=new int[1];
                for(i[0]=0;i[0]<fontNames.length;i[0]++){
                    txtField[i[0]]=new JTextField();
                    txtField[i[0]].setText("Вот так выглядит текст, начертанный шрифтом "+fontNames[i[0]]);
                    txtField[i[0]].setFont(new Font(fontNames[i[0]], comboDateFontStyle.getSelectedIndex(), Integer.parseInt(txtDateFontSize.getText())));
                    if(fontNames[i[0]].equals(btnDateFont.getText())){
                        currentFieldIndex[0]=i[0];
                        txtField[currentFieldIndex[0]].setBackground(Color.YELLOW);
                    }
                    txtField[i[0]].addMouseListener(new java.awt.event.MouseAdapter() {                      
                        int index=i[0];
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            btnDateFont.setText(fontNames[index]);
                            txtField[currentFieldIndex[0]].setBackground(Color.WHITE);
                            currentFieldIndex[0]=index;
                            txtField[index].setBackground(Color.YELLOW);
                            settings.dateFont=new Font(fontNames[index],
                                            comboDateFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtDateFontSize.getText()));
                            repaintAllAds();
                        }                        
                    });
                    panel.add(txtField[i[0]]);                           
                }                               
                frame.add(scroll);
                frame.setBounds(settingsFrame.getX()+settingsFrame.getWidth(),settingsFrame.getY(), 600, 600);
                frame.setPreferredSize(new Dimension(600,600));
                frame.pack();
                frame.setVisible(true);
            }
        }); 
        btnYearFont.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                JFrame frame=new JFrame();
                JPanel panel=new JPanel();
                JScrollPane scroll=new JScrollPane(panel);
                scroll.getVerticalScrollBar().setUnitIncrement(16);
                panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
                String[] fontNames=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();        
                JTextField[] txtField=new JTextField[fontNames.length];                                
                int[] i=new int[1];
                int[] currentFieldIndex=new int[1];
                for(i[0]=0;i[0]<fontNames.length;i[0]++){
                    txtField[i[0]]=new JTextField();
                    txtField[i[0]].setText("Вот так выглядит текст, начертанный шрифтом "+fontNames[i[0]]);
                    txtField[i[0]].setFont(new Font(fontNames[i[0]], comboYearFontStyle.getSelectedIndex(), Integer.parseInt(txtYearFontSize.getText())));
                    if(fontNames[i[0]].equals(btnYearFont.getText())){
                        currentFieldIndex[0]=i[0];
                        txtField[currentFieldIndex[0]].setBackground(Color.YELLOW);
                    }
                    txtField[i[0]].addMouseListener(new java.awt.event.MouseAdapter() {                      
                        int index=i[0];
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            btnYearFont.setText(fontNames[index]);
                            txtField[currentFieldIndex[0]].setBackground(Color.WHITE);
                            currentFieldIndex[0]=index;
                            txtField[index].setBackground(Color.YELLOW);
                            settings.yearFont=new Font(fontNames[index],
                                            comboYearFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtYearFontSize.getText()));
                            repaintAllAds();
                        }                        
                    });
                    panel.add(txtField[i[0]]);                           
                }                               
                frame.add(scroll);
                frame.setBounds(settingsFrame.getX()+settingsFrame.getWidth(),settingsFrame.getY(), 600, 600);
                frame.setPreferredSize(new Dimension(600,600));
                frame.pack();
                frame.setVisible(true);
            }
        }); 
        btnDescriptFont.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){                              
                JFrame frame=new JFrame();
                JPanel panel=new JPanel();
                JScrollPane scroll=new JScrollPane(panel);
                scroll.getVerticalScrollBar().setUnitIncrement(16);
                panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
                String[] fontNames=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();        
                JTextField[] txtField=new JTextField[fontNames.length];                                
                int[] i=new int[1];
                int[] currentFieldIndex=new int[1];
                for(i[0]=0;i[0]<fontNames.length;i[0]++){
                    txtField[i[0]]=new JTextField();
                    txtField[i[0]].setText("Вот так выглядит текст, начертанный шрифтом "+fontNames[i[0]]);
                    txtField[i[0]].setFont(new Font(fontNames[i[0]], comboDescriptFontStyle.getSelectedIndex(), Integer.parseInt(txtDescriptFontSize.getText())));
                    if(fontNames[i[0]].equals(btnDescriptFont.getText())){
                        currentFieldIndex[0]=i[0];
                        txtField[currentFieldIndex[0]].setBackground(Color.YELLOW);
                    }
                    txtField[i[0]].addMouseListener(new java.awt.event.MouseAdapter() {                      
                        int index=i[0];
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            btnDescriptFont.setText(fontNames[index]);
                            txtField[currentFieldIndex[0]].setBackground(Color.WHITE);
                            currentFieldIndex[0]=index;
                            txtField[index].setBackground(Color.YELLOW);
                            settings.descriptFont=new Font(fontNames[index],
                                            comboDescriptFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtDescriptFontSize.getText()));
                            repaintAllAds();
                        }                        
                    });
                    panel.add(txtField[i[0]]);                           
                }                               
                frame.add(scroll);
                frame.setBounds(settingsFrame.getX()+settingsFrame.getWidth(),settingsFrame.getY(), 600, 600);
                frame.setPreferredSize(new Dimension(600,600));
                frame.pack();
                frame.setVisible(true);
            }
        }); 
        btnAppend.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){
                settings.frameBackColor=newFrameBackColor[0];
                settings.jPanel1BackColor=newJPanel1BackColor[0];
                settings.txtDescriptBackColor=newTxtDescriptBackColor[0];
                settings.txtNameFontColor=newTxtNameFontColor[0];
                settings.txtYearFontColor=newTxtYearFontColor[0];
                settings.txtPriseFontColor=newTxtPriseFontColor[0];
                settings.txtWhatFontColor=newTxtWhatFontColor[0];
                settings.txtCityFontColor=newTxtCityFontColor[0];
                settings.txtDateFontColor=newTxtDateFontColor[0];
                settings.adsMarginLeft=Integer.parseInt(txtAdsMarginLeft.getText());
                settings.adsMarginRight=Integer.parseInt(txtAdsMarginRight.getText());
                settings.distBtvAds=Integer.parseInt(txtDistBtvAds.getText());
                settings.marginTextFromPict=Integer.parseInt(txtMarginTextFromPict.getText());
                settings.distBtvAdsItems=Integer.parseInt(txtDistBtvAdsItems.getText());
                settings.yearsSorterMetod=(String)comboSortYearsMetod.getSelectedItem();
                settings.showOnlyIfWriteLetterIsAvailable=checkShowOnlyIfWriteLetterIsAvailable.isSelected();
                settings.nameFont=new Font(btnNameFont.getText(),
                                            comboNameFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtNameFontSize.getText()));
                settings.priseFont=new Font(btnPriseFont.getText(),
                                            comboPriseFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtPriseFontSize.getText()));       
                settings.cityFont=new Font(btnCityFont.getText(),
                                            comboCityFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtCityFontSize.getText()));  
                settings.whatFont=new Font(btnWhatFont.getText(),
                                            comboWhatFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtWhatFontSize.getText())); 
                settings.dateFont=new Font(btnDateFont.getText(),
                                            comboDateFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtDateFontSize.getText()));  
                settings.yearFont=new Font(btnYearFont.getText(),
                                            comboYearFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtYearFontSize.getText()));  
                settings.descriptFont=new Font(btnDescriptFont.getText(),
                                            comboDescriptFontStyle.getSelectedIndex(),
                                            Integer.parseInt(txtDescriptFontSize.getText()));  
                settings.delayFrom=Integer.parseInt(delayFrom.getText());
                settings.delayTo=Integer.parseInt(delayTo.getText());
                settings.delayDescriptShow=Integer.parseInt(txtDelayDescriptShow.getText());
                settings.delayImgShow=Integer.parseInt(txtDelayImgShow.getText());
                settings.scrollStep=Integer.parseInt(txtScrollStep.getText());
                settings.adsNumOnPage=Integer.parseInt(txtAdsNumOnPage.getText());                
                settings.changeSettings();
                frame2.getContentPane().setBackground(newFrameBackColor[0]); 
                jPanel1.setBackground(newJPanel1BackColor[0]);
                if(arrOfArrAds.size()!=0){
                    jPanel1.removeAll();
                    /*for(int i=0;i<arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).size();i++){
                        if(adsFilterFirst(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).what,arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).city, "static")&&
                           adsFilterSecond(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).descript, arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).name, "static")){
                            addItemToJPanel1(createNewPAll(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i)));
                        }
                    }*/
                    repaintAllAds();
                }
                settingsFrame.dispose();
            }
        });
        btnCansel.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event){
                //jPanel1.setBackground(JColorChooser.showDialog(frame2, "Choose!", Color.yellow));
                //Возвращаю старые настройки:
                frame2.getContentPane().setBackground(settings.frameBackColor);
                jPanel1.setBackground(settings.jPanel1BackColor);
                
                settingsFrame.dispose();
            }
        });
    }//GEN-LAST:event_btnSettingsActionPerformed

    private void jSortingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jSortingItemStateChanged
        // TODO add your handling code here:
        repaintAllAds();
    }//GEN-LAST:event_jSortingItemStateChanged

    private void btnAcceptFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAcceptFilterKeyReleased
        // TODO add your handling code here:        
    }//GEN-LAST:event_btnAcceptFilterKeyReleased

    private void txtRequestKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRequestKeyReleased
        // TODO add your handling code here:
        //System.out.println(evt.getKeyCode());         
        if(evt.getKeyCode()==10){            
            if(doubleEnter!=0){
                doubleEnter=0;
                copyFile(openedFileForRequest, openedFileForRequest.substring(0,openedFileForRequest.length()-4)+"_Origin.txt");
                try {        
                    saveFile(openedFileForRequest,txtRequest.getText());
                } catch (IOException ex) {
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                txtRequest.setVisible(false);
                btnAcceptFilter.setVisible(false);
                btnCanselFilter.setVisible(false);
                setMenuItemsVisible(true);     
                jComboBox1.setEnabled(true);
                pack();
            }else{
                doubleEnter++;
            }
        }else{
            doubleEnter=0;
        }        
        if(evt.getKeyCode()==27){
            txtRequest.setVisible(false);
            btnAcceptFilter.setVisible(false);
            btnCanselFilter.setVisible(false);
            setMenuItemsVisible(true);  
            jComboBox1.setEnabled(true);
            pack();
        }
    }//GEN-LAST:event_txtRequestKeyReleased

    private void jPanel1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyReleased
        // TODO add your handling code here:        
    }//GEN-LAST:event_jPanel1KeyReleased

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        // TODO add your handling code here:        
    }//GEN-LAST:event_formKeyReleased

    private void btnSettingsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSettingsKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode()==10){            
            if(doubleEnter!=0){
                doubleEnter=0;
                copyFile(openedFileForRequest, openedFileForRequest.substring(0,openedFileForRequest.length()-4)+"_Origin.txt");
                try {        
                    saveFile(openedFileForRequest,txtRequest.getText());
                } catch (IOException ex) {
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                txtRequest.setVisible(false);
                btnAcceptFilter.setVisible(false);
                btnCanselFilter.setVisible(false);
                setMenuItemsVisible(true);     
                jComboBox1.setEnabled(true);
                pack();
            }else{
                doubleEnter++;
            }
        }else{
            doubleEnter=0;
        }        
        if(evt.getKeyCode()==27){
            txtRequest.setVisible(false);
            btnAcceptFilter.setVisible(false);
            btnCanselFilter.setVisible(false);
            setMenuItemsVisible(true);  
            jComboBox1.setEnabled(true);
            pack();
        }
    }//GEN-LAST:event_btnSettingsKeyReleased

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        // TODO add your handling code here:   
        System.out.println(evt.getKeyCode()); 
        if(evt.getKeyCode()==37){
            if(currPageAdsForShow>0){
                currPageAdsForShow--;
                updatePageRibbon("self"); 
            }            
        }
        if(evt.getKeyCode()==39){
            if(currPageAdsForShow<numOfPage){
                currPageAdsForShow++;
                updatePageRibbon("self"); 
            }            
        }
        if(evt.getKeyCode()==34){
            //JViewport port=jScrollPane2.getViewport();
            jScrollPane2.getVerticalScrollBar().setValue(jScrollPane2.getVerticalScrollBar().getMaximum());
            //System.out.println(jScrollPane2.getVerticalScrollBarPolicy()); 
        }
        if(evt.getKeyCode()==33){
            //JViewport port=jScrollPane2.getViewport();
            jScrollPane2.getVerticalScrollBar().setValue(jScrollPane2.getVerticalScrollBar().getMinimum());
            //System.out.println(jScrollPane2.getVerticalScrollBarPolicy()); 
        }
        if(evt.getKeyCode()==10){            
            if(doubleEnter!=0){
                doubleEnter=0;
                copyFile(openedFileForRequest, openedFileForRequest.substring(0,openedFileForRequest.length()-4)+"_Origin.txt");
                try {        
                    saveFile(openedFileForRequest,txtRequest.getText());
                } catch (IOException ex) {
                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                txtRequest.setVisible(false);
                btnAcceptFilter.setVisible(false);
                btnCanselFilter.setVisible(false);
                setMenuItemsVisible(true);     
                jComboBox1.setEnabled(true);
                pack();
            }else{
                doubleEnter++;
            }
        }else{
            doubleEnter=0;
        }        
        if(evt.getKeyCode()==27){
            txtRequest.setVisible(false);
            btnAcceptFilter.setVisible(false);
            btnCanselFilter.setVisible(false);
            setMenuItemsVisible(true);  
            jComboBox1.setEnabled(true);
            pack();
        }
    }//GEN-LAST:event_jPanel1KeyPressed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:        
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jPanel1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyTyped
        // TODO add your handling code here:        
    }//GEN-LAST:event_jPanel1KeyTyped

    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseEntered
        // TODO add your handling code here:
        jPanel1.grabFocus();
    }//GEN-LAST:event_jPanel1MouseEntered
    public void setMenuItemsVisible(boolean is){
        //btnStart.setEnabled(is);
        btnPhrases.setEnabled(is);
        btnWords.setEnabled(is);
        btnCityPlus.setEnabled(is);
        btnCityMinus.setEnabled(is);
        btnCompanyMinus.setEnabled(is);
        btnCompanyPlus.setEnabled(is);
        btnRefresh.setEnabled(is);
        checkCityPlus.setEnabled(is);
        checkCityMinus.setEnabled(is);
        checkCompanyPlus.setEnabled(is);
        checkCompanyMinus.setEnabled(is);    
        jSorting.setEnabled(is);
    }
    public void addItemToJPanel1(JPanel addedItem){
        jPanel1.setLayout(new BoxLayout(jPanel1, BoxLayout.Y_AXIS));        
        jPanel1.add(Box.createVerticalStrut(settings.distBtvAds/2));
        jPanel1.add(addedItem);
        jPanel1.add(Box.createVerticalStrut(settings.distBtvAds/2));
        jPanel1.add(Box.createVerticalGlue());
        pack();
    }
    public void removeItemsFromJPanel1(){
        jPanel1.removeAll();
        pack();
    }
    public void updatePageRibbon(String  from){                     
        if(adsForShow.size()%settings.adsNumOnPage==0){
            numOfPage=adsForShow.size()/settings.adsNumOnPage;
        }else{
            numOfPage=adsForShow.size()/settings.adsNumOnPage+1;
        }
        System.out.println(numOfPage);
        pageRibbon.removeAll();
        if(!from.equals("Parser")){
            removeItemsFromJPanel1();
            jPanel1.add(Box.createVerticalStrut(25));                            
            jPanel1.add(pageRibbon);             
            for(int i=currPageAdsForShow*settings.adsNumOnPage;
                   (i<adsForShow.size()&&i<currPageAdsForShow*settings.adsNumOnPage+settings.adsNumOnPage);
                    i++){
                addItemToJPanel1(createNewPAll(adsForShow.get(i)));
            }              
        }else{
            if(currPageAdsForShow==adsForShow.size()/(settings.adsNumOnPage+1)&&
                    jPanel1.getComponentCount()+4<=settings.adsNumOnPage*4+2){                
                addItemToJPanel1(createNewPAll(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).size()-1)));
                pack();
            }
        }
        if(numOfPage<11&&numOfPage>1){            
            ArrayList<JButton> btnArr=new ArrayList();
            int[] i=new int[1];
            for(i[0]=0;i[0]<numOfPage;i[0]++){
                btnArr.add(new JButton(""+(i[0]+1)));
                btnArr.get(i[0]).setFocusable(false);        
                btnArr.get(i[0]).setFont(new Font("Arrial",Font.BOLD,12)); 
                if(i[0]==currPageAdsForShow){
                    btnArr.get(i[0]).setContentAreaFilled(false);                                                                        
                    btnArr.get(i[0]).setFont(new Font("Arrial",Font.BOLD,18));
                }
                btnArr.get(i[0]).addMouseListener(new java.awt.event.MouseAdapter() {                      
                    int index=i[0];                        
                    public void mouseClicked(java.awt.event.MouseEvent evt) {                                                
                        currPageAdsForShow=Integer.parseInt(btnArr.get(index).getText())-1;;
                        updatePageRibbon("self");     
                    }                        
                });                 
            }
            pageRibbon.add(Box.createHorizontalStrut(50));                
            for(int j=0;j<numOfPage;j++){
                pageRibbon.add(btnArr.get(j));
                pageRibbon.add(Box.createHorizontalStrut(15));
            } 
            JLabel lEnterPage=new JLabel("На страницу: ");
            JTextField txtEnterPage=new JTextField();
            txtEnterPage.setPreferredSize(new Dimension(30,25));
            //txtEnterPage.setMinimumSize(new Dimension(30,25));
            txtEnterPage.setMaximumSize(new Dimension(30,25));
            JButton btnEnterPage=new JButton("Перейти");
            btnEnterPage.addMouseListener(new java.awt.event.MouseAdapter() {                                                                     
                public void mouseClicked(java.awt.event.MouseEvent evt) {    
                    if(Integer.parseInt(txtEnterPage.getText())-1<=numOfPage){                        
                        currPageAdsForShow=Integer.parseInt(txtEnterPage.getText())-1;
                        updatePageRibbon("self");
                    }
                }
            });
            pageRibbon.add(Box.createHorizontalStrut(10));
            pageRibbon.add(lEnterPage);
            pageRibbon.add(Box.createHorizontalStrut(10));
            pageRibbon.add(txtEnterPage);
            pageRibbon.add(Box.createHorizontalStrut(10));
            pageRibbon.add(btnEnterPage);
            pageRibbon.add(Box.createHorizontalGlue());
            pack();
        }else{
            if(numOfPage>=11&&currPageAdsForShow<=4){
                JButton btnLastPage=new JButton(""+(numOfPage));               
                if(currPageAdsForShow==numOfPage-1){
                    btnLastPage.setContentAreaFilled(false);
                    btnLastPage.setFont(new Font("Arrial",Font.BOLD,18));
                }else{
                    btnLastPage.setContentAreaFilled(true);
                    btnLastPage.setFont(new Font("Arrial",Font.BOLD,12));
                }
                btnLastPage.addMouseListener(new java.awt.event.MouseAdapter() {                                                                     
                    public void mouseClicked(java.awt.event.MouseEvent evt) {    
                        currPageAdsForShow=Integer.parseInt(btnLastPage.getText())-1;
                        updatePageRibbon("self");
                    }
                });
                
                JLabel lGap=new JLabel("..");
                lGap.setFont(new Font("Arrial",Font.BOLD,18));
                
                ArrayList<JButton> btnArr=new ArrayList();
                int[] i=new int[1];
                for(i[0]=0;i[0]<9;i[0]++){
                    btnArr.add(new JButton(""+(i[0]+1)));
                    btnArr.get(i[0]).setFocusable(false);        
                    btnArr.get(i[0]).setFont(new Font("Arrial",Font.BOLD,12)); 
                    if(i[0]==currPageAdsForShow){
                        btnArr.get(i[0]).setContentAreaFilled(false);                                                                        
                        btnArr.get(i[0]).setFont(new Font("Arrial",Font.BOLD,18));
                    }
                    btnArr.get(i[0]).addMouseListener(new java.awt.event.MouseAdapter() {                      
                        int index=i[0];                        
                        public void mouseClicked(java.awt.event.MouseEvent evt) {                                                
                            currPageAdsForShow=Integer.parseInt(btnArr.get(index).getText())-1;;
                            updatePageRibbon("self");     
                        }                        
                    });                 
                }
                pageRibbon.add(Box.createHorizontalStrut(50));                
                for(int j=0;j<9;j++){
                    pageRibbon.add(btnArr.get(j));
                    pageRibbon.add(Box.createHorizontalStrut(15));
                }
                pageRibbon.add(lGap);
                pageRibbon.add(Box.createHorizontalStrut(15));
                pageRibbon.add(btnLastPage);                                             
            }
            //Если >=11 и (currP>(кол-во - 4))
            if(numOfPage>=11&&(currPageAdsForShow>(numOfPage-6))){
                JButton btnFirstPage=new JButton(""+1);                
                if(currPageAdsForShow==0){
                    btnFirstPage.setContentAreaFilled(false);
                    btnFirstPage.setFont(new Font("Arrial",Font.BOLD,18));
                }else{
                    btnFirstPage.setContentAreaFilled(true);
                    btnFirstPage.setFont(new Font("Arrial",Font.BOLD,12));
                }
                btnFirstPage.addMouseListener(new java.awt.event.MouseAdapter() {                                                                     
                    public void mouseClicked(java.awt.event.MouseEvent evt) {    
                        currPageAdsForShow=Integer.parseInt(btnFirstPage.getText())-1;
                        updatePageRibbon("self");
                    }
                });
                
                JLabel lGap=new JLabel("..");
                lGap.setFont(new Font("Arrial",Font.BOLD,18));
                
                ArrayList<JButton> btnArr=new ArrayList();
                int[] i=new int[1];
                for(i[0]=0;i[0]<9;i[0]++){
                    btnArr.add(new JButton(""+(numOfPage-9+i[0]+1)));
                    btnArr.get(i[0]).setFocusable(false);        
                    btnArr.get(i[0]).setFont(new Font("Arrial",Font.BOLD,12)); 
                    if(numOfPage-9+i[0]==currPageAdsForShow){
                        btnArr.get(i[0]).setContentAreaFilled(false);                                                                        
                        btnArr.get(i[0]).setFont(new Font("Arrial",Font.BOLD,18));
                    }
                    btnArr.get(i[0]).addMouseListener(new java.awt.event.MouseAdapter() {                      
                        int index=i[0];                        
                        public void mouseClicked(java.awt.event.MouseEvent evt) {                                                
                            currPageAdsForShow=Integer.parseInt(btnArr.get(index).getText())-1;;
                            updatePageRibbon("self");     
                        }                        
                    });                 
                }
                pageRibbon.add(Box.createHorizontalStrut(50));
                pageRibbon.add(btnFirstPage);
                pageRibbon.add(Box.createHorizontalStrut(15));
                pageRibbon.add(lGap);
                pageRibbon.add(Box.createHorizontalStrut(15));
                for(int j=0;j<9;j++){
                    pageRibbon.add(btnArr.get(j));
                    pageRibbon.add(Box.createHorizontalStrut(15));
                }
            }
            if(numOfPage>=11&&(currPageAdsForShow>4&&currPageAdsForShow<=(numOfPage-6))){
                JButton btnFirstPage=new JButton(""+1);                
                if(currPageAdsForShow==0){
                    btnFirstPage.setContentAreaFilled(false);
                    btnFirstPage.setFont(new Font("Arrial",Font.BOLD,18));
                }else{
                    btnFirstPage.setContentAreaFilled(true);
                    btnFirstPage.setFont(new Font("Arrial",Font.BOLD,12));
                }
                btnFirstPage.addMouseListener(new java.awt.event.MouseAdapter() {                                                                     
                    public void mouseClicked(java.awt.event.MouseEvent evt) {    
                        currPageAdsForShow=Integer.parseInt(btnFirstPage.getText())-1;
                        updatePageRibbon("self");
                    }
                });
                
                JLabel lFirstGap=new JLabel("..");
                lFirstGap.setFont(new Font("Arrial",Font.BOLD,18));
                
                JButton btnLastPage=new JButton(""+(numOfPage));               
                if(currPageAdsForShow==numOfPage-1){
                    btnLastPage.setContentAreaFilled(false);
                    btnLastPage.setFont(new Font("Arrial",Font.BOLD,18));
                }else{
                    btnLastPage.setContentAreaFilled(true);
                    btnLastPage.setFont(new Font("Arrial",Font.BOLD,12));
                }
                btnLastPage.addMouseListener(new java.awt.event.MouseAdapter() {                                                                     
                    public void mouseClicked(java.awt.event.MouseEvent evt) {    
                        currPageAdsForShow=Integer.parseInt(btnLastPage.getText())-1;
                        updatePageRibbon("self");
                    }
                });
                
                JLabel lLastGap=new JLabel("..");
                lLastGap.setFont(new Font("Arrial",Font.BOLD,18));
                
                ArrayList<JButton> btnArr=new ArrayList();
                int[] i=new int[1];
                for(i[0]=0;i[0]<7;i[0]++){
                    btnArr.add(new JButton(""+(currPageAdsForShow-3+i[0]+1)));
                    btnArr.get(i[0]).setFocusable(false);        
                    btnArr.get(i[0]).setFont(new Font("Arrial",Font.BOLD,12));                                                            
                    btnArr.get(i[0]).addMouseListener(new java.awt.event.MouseAdapter() {                      
                        int index=i[0];                        
                        public void mouseClicked(java.awt.event.MouseEvent evt) {                                                
                            currPageAdsForShow=Integer.parseInt(btnArr.get(index).getText())-1;;
                            updatePageRibbon("self");     
                        }                        
                    });                 
                }
                btnArr.get(3).setContentAreaFilled(false);                                                                        
                btnArr.get(3).setFont(new Font("Arrial",Font.BOLD,18)); 
                pageRibbon.add(Box.createHorizontalStrut(50));
                pageRibbon.add(btnFirstPage);
                pageRibbon.add(Box.createHorizontalStrut(15));
                pageRibbon.add(lFirstGap);
                pageRibbon.add(Box.createHorizontalStrut(15));
                for(int j=0;j<7;j++){
                    pageRibbon.add(btnArr.get(j));
                    pageRibbon.add(Box.createHorizontalStrut(15));
                }
                pageRibbon.add(lLastGap);
                pageRibbon.add(Box.createHorizontalStrut(15));
                pageRibbon.add(btnLastPage);                
            }
            if(numOfPage>1){
                JLabel lEnterPage=new JLabel("На страницу: ");
                JTextField txtEnterPage=new JTextField();
                txtEnterPage.setPreferredSize(new Dimension(30,25));
                //txtEnterPage.setMinimumSize(new Dimension(30,25));
                txtEnterPage.setMaximumSize(new Dimension(30,25));
                JButton btnEnterPage=new JButton("Перейти");
                btnEnterPage.addMouseListener(new java.awt.event.MouseAdapter() {                                                                     
                    public void mouseClicked(java.awt.event.MouseEvent evt) {    
                        if(Integer.parseInt(txtEnterPage.getText())-1<numOfPage){                        
                            currPageAdsForShow=Integer.parseInt(txtEnterPage.getText())-1;
                            updatePageRibbon("self");
                        }
                    }
                });
                pageRibbon.add(Box.createHorizontalStrut(10));
                pageRibbon.add(lEnterPage);
                pageRibbon.add(Box.createHorizontalStrut(10));
                pageRibbon.add(txtEnterPage);
                pageRibbon.add(Box.createHorizontalStrut(10));
                pageRibbon.add(btnEnterPage);
                pageRibbon.add(Box.createHorizontalGlue());
                pack();  
            }
        }        
    }
    public JPanel createNewPAll(Ads ads){             
        String name=ads.name+" ";
        String prise=ads.prise;
        String what=ads.what;
        String city=ads.city;
        String date=toAvitoDateFormat(ads.date);
        String descript=ads.descript;
        String imgMiddle=ads.imgMiddle;
        String imgBig=ads.imgBig;
        String[] arrImgSmall=ads.arrImgSmall; 
        ArrayList<String> arrYears=new ArrayList();
        ArrayList<String> arrYears2=yearsSorter(ads.years,settings.yearsSorterMetod);
        boolean[] isHere= new boolean[1];
        isHere[0]=false;   
        boolean[] threadAlredyStarted=new boolean[1];
        threadAlredyStarted[0]=false;   
        
        for(int i=0;i<arrYears2.size();i++){
            arrYears.add(arrYears2.get(i)+"г. ");
        }
        Point[] firstWinPoint=new Point[1];
        //boolean threadAlredyStarted=false; //было раскоментированно
        javax.swing.ImageIcon ico;       
        //if(imgMiddle.equals(curProjPath+"\\картинки\\средние\\")){
        if(imgMiddle.indexOf(".jpg")==-1){
            System.out.println("Нет фото!");
            ico = new javax.swing.ImageIcon(getClass().getResource("/icons/no_photo.jpg"));
        }else{
            ico = new javax.swing.ImageIcon(imgMiddle);
        }
        JLabel img=new JLabel();  
        /*img.setOpaque(true);
        img.setBackground(settings.jPanel1BackColor);*/
        img.setIcon(ico);          
        int N=arrImgSmall.length;
        JLabel[] arrImg=new JLabel[N];                
        for(int i=0;i<arrImg.length;i++){
            arrImg[i]=new JLabel();
            arrImg[i].setIcon(new javax.swing.ImageIcon(arrImgSmall[i]));
        }      
                                                          
        JLabel txt1=new JLabel();
        txt1.setFont(settings.nameFont);
        txt1.setForeground(settings.txtNameFontColor); 
        txt1.setBackground(settings.jPanel1BackColor);
        txt1.setOpaque(true);
        txt1.setText(name);
        
        JLabel txt2=new JLabel();
        txt2.setFont(settings.priseFont);
        txt2.setForeground(settings.txtPriseFontColor);
        txt2.setBackground(settings.jPanel1BackColor);
        txt2.setText(prise);

        JLabel txt3=new JLabel();
        txt3.setFont(settings.whatFont);
        txt3.setForeground(settings.txtWhatFontColor);
        txt3.setBackground(settings.jPanel1BackColor);
        txt3.setText(what);

        JLabel txt4=new JLabel();
        txt4.setFont(settings.cityFont);
        txt4.setForeground(settings.txtCityFontColor);
        txt4.setBackground(settings.jPanel1BackColor);
        txt4.setText(city);
        
        JLabel txt5=new JLabel();
        txt5.setFont(settings.dateFont);
        txt5.setForeground(settings.txtDateFontColor);
        txt5.setBackground(settings.jPanel1BackColor);
        txt5.setText(date);      
        
        JTextArea txt6=new JTextArea();
        txt6.setBackground(settings.txtDescriptBackColor);
        txt6.setFont(settings.descriptFont);
        txt6.setLineWrap(true);                
        txt6.setWrapStyleWord(true);             
        txt6.setText(descript);            
        //Component horStrut=Box.createHorizontalStrut(settings.adsMarginRight+forHorStrut);
        JPanel p1Txt = new JPanel();
        JLabel[] lArrYears=new JLabel[arrYears.size()];                
        for(int i=0;i<lArrYears.length;i++){
            lArrYears[i]=new JLabel();
            lArrYears[i].setFont(settings.yearFont); 
            lArrYears[i].setForeground(settings.txtYearFontColor);             
            lArrYears[i].setText(arrYears.get(i));   
            lArrYears[i].addMouseListener(new java.awt.event.MouseAdapter() {                     
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    isHere[0]=false;
                    Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
                    if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
                        try {
                            URI uri=new URI(ads.adsUrl);
                            desktop.browse(uri);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    isHere[0]=true;                      
                    if(!threadAlredyStarted[0]){                    
                        new Thread(new Runnable(){                    
                            public void run() {                    
                                threadAlredyStarted[0]=true;
                                try {                                                                                                
                                    Thread.sleep(settings.delayDescriptShow);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                if(isHere[0]){                                                               
                                    firstWinPoint[0]=new Point(jScrollPane2.getViewport().getViewPosition());                                                                
                                    p1Txt.removeAll(); // 
                                    p1Txt.add(txt6);  
                                    p1Txt.add(Box.createHorizontalStrut(jPanel1.getWidth()-frame2.getWidth()+settings.adsMarginRight));
                                    p1Txt.add(Box.createHorizontalGlue());//
                                    //p1Txt.add(horGlue);                                
                                    jPanel1.repaint();
                                    pack();                              
                                    //threadAlredyStarted=false;
                                }
                                threadAlredyStarted[0]=false;
                            }                    
                        }).start();                    
                    }                
                } 
                public void mouseExited(java.awt.event.MouseEvent evt){
                    isHere[0]=false;
                }

            });
        }        
        p1Txt.setBackground(settings.jPanel1BackColor);
        p1Txt.setLayout(new BoxLayout(p1Txt, BoxLayout.X_AXIS));     
        if(lArrYears.length!=0){
            p1Txt.add(lArrYears[0]);
        }
        p1Txt.add(txt1);        
        for(int i=1;i<lArrYears.length;i++){
            p1Txt.add(lArrYears[i]);
        }
        /*Component horGlue = Box.createHorizontalGlue();
        p1Txt.add(horGlue);*/
        p1Txt.add(Box.createHorizontalGlue());
        
        JPanel p2Txt = new JPanel();
        p2Txt.setBackground(settings.jPanel1BackColor);
        p2Txt.setLayout(new BoxLayout(p2Txt, BoxLayout.X_AXIS));        
        p2Txt.add(txt2);
        p2Txt.add(Box.createHorizontalGlue());
        
        JPanel p3Txt = new JPanel();
        p3Txt.setBackground(settings.jPanel1BackColor);
        p3Txt.setLayout(new BoxLayout(p3Txt, BoxLayout.X_AXIS));        
        p3Txt.add(txt3);
        p3Txt.add(Box.createHorizontalGlue());
        
        JPanel p4Txt = new JPanel();
        p4Txt.setBackground(settings.jPanel1BackColor);
        p4Txt.setLayout(new BoxLayout(p4Txt, BoxLayout.X_AXIS));        
        p4Txt.add(txt4);
        p4Txt.add(Box.createHorizontalGlue());
        
        JPanel p5Txt = new JPanel();
        p5Txt.setBackground(settings.jPanel1BackColor);
        p5Txt.setLayout(new BoxLayout(p5Txt, BoxLayout.X_AXIS));        
        p5Txt.add(txt5);
        p5Txt.add(Box.createHorizontalGlue());                
        
        JPanel pTxts = new JPanel();
        pTxts.setBackground(settings.jPanel1BackColor);
        pTxts.setBackground(settings.jPanel1BackColor);
        pTxts.setLayout(new BoxLayout(pTxts, BoxLayout.Y_AXIS));        
        pTxts.add(p1Txt);
        pTxts.add(Box.createVerticalStrut(settings.distBtvAdsItems));
        pTxts.add(p2Txt);
        pTxts.add(Box.createVerticalStrut(settings.distBtvAdsItems));
        pTxts.add(p3Txt);
        pTxts.add(Box.createVerticalStrut(settings.distBtvAdsItems));
        pTxts.add(p4Txt);
        pTxts.add(Box.createVerticalStrut(settings.distBtvAdsItems));
        pTxts.add(p5Txt);
        pTxts.add(Box.createVerticalGlue());
        
        JPanel pImg = new JPanel();
        pImg.setBackground(settings.jPanel1BackColor);
        pImg.setLayout(new BoxLayout(pImg, BoxLayout.Y_AXIS));        
        pImg.add(img);        
        pImg.add(Box.createVerticalGlue());
        
        JPanel pAll = new JPanel();
        pAll.setBackground(settings.jPanel1BackColor);
        pAll.setLayout(new BoxLayout(pAll, BoxLayout.X_AXIS)); 
        pAll.add(Box.createHorizontalStrut(140-ico.getIconWidth()+settings.adsMarginLeft));                         //ДОБАВИЛ!!!!!        
        pAll.add(pImg);
        pAll.add(Box.createHorizontalStrut(settings.marginTextFromPict));        
        pAll.add(pTxts);         
        Component pAllGlue = Box.createHorizontalGlue();
        pAll.add(pAllGlue);
        
        img.addMouseListener(new java.awt.event.MouseAdapter() {   
            JPanel pSmallImgs;
            boolean isHere=false;
            boolean threadAlredyStarted=false;  
            boolean isCreated=false;
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                //если есть среднее фото!
                //if(!imgMiddle.equals(curProjPath+"\\картинки\\средние\\")){
                isHere=true;  
                if(!threadAlredyStarted){                    
                    new Thread(new Runnable(){                    
                        public void run() {                    
                            threadAlredyStarted=true;
                            try {                                                                                                
                                Thread.sleep(settings.delayImgShow);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            if(isHere){
                                if(imgMiddle.indexOf(".jpg")!=-1){
                                    img.setIcon(new javax.swing.ImageIcon(imgBig));                
                                    pAll.remove(pTxts);                 
                                    JPanel[] pArrImg=new JPanel[arrImg.length];                    
                                    for(int i=0;i<pArrImg.length;i++){                        
                                        pArrImg[i] = new JPanel();
                                        pArrImg[i].setBackground(settings.jPanel1BackColor);
                                        pArrImg[i].setLayout(new BoxLayout(pArrImg[i], BoxLayout.X_AXIS));        
                                        pArrImg[i].add(arrImg[i]);
                                        pArrImg[i].add(Box.createHorizontalGlue());
                                    }
                                    pSmallImgs=new JPanel();
                                    pSmallImgs.setBackground(settings.jPanel1BackColor);
                                    pSmallImgs.setLayout(new BoxLayout(pSmallImgs, BoxLayout.Y_AXIS));
                                    for(int i=0;i<pArrImg.length;i++){
                                        pSmallImgs.add(pArrImg[i]);
                                        pSmallImgs.add(Box.createVerticalStrut(10));
                                    }
                                    pSmallImgs.add(Box.createVerticalGlue());
                                    pAll.add(pSmallImgs);                     
                                    pAll.add(pAllGlue);
                                    pack();
                                    isCreated=true;
                                }
                            } 
                            threadAlredyStarted=false;
                        }
                    }).start();
                }                
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {                
                //if(!imgMiddle.equals(curProjPath+"\\картинки\\средние\\")){
                isHere=false;
                if(isCreated){
                    if(imgMiddle.indexOf(".jpg")!=-1){
                        img.setIcon(new javax.swing.ImageIcon(imgMiddle));                
                        pAll.remove(pSmallImgs);
                        pAll.add(pTxts);                        
                        pAll.add(pAllGlue);
                        pack();                
                        isCreated=false;
                    }
                }
            }
        });
        txt1.addMouseListener(new java.awt.event.MouseAdapter() {                     
            public void mousePressed(java.awt.event.MouseEvent evt) {
                isHere[0]=false;
                Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
                if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
                    try {
                        URI uri=new URI(ads.adsUrl);
                        desktop.browse(uri);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                isHere[0]=true;                      
                if(!threadAlredyStarted[0]){                    
                    new Thread(new Runnable(){                    
                        public void run() {                    
                            threadAlredyStarted[0]=true;
                            try {                                                                                                
                                Thread.sleep(settings.delayDescriptShow);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            if(isHere[0]){                                                               
                                firstWinPoint[0]=new Point(jScrollPane2.getViewport().getViewPosition());                                                                
                                p1Txt.removeAll(); // 
                                p1Txt.add(txt6);  
                                p1Txt.add(Box.createHorizontalStrut(jPanel1.getWidth()-frame2.getWidth()+settings.adsMarginRight));
                                p1Txt.add(Box.createHorizontalGlue());//
                                //p1Txt.add(horGlue);                                
                                jPanel1.repaint();
                                pack();                              
                                //threadAlredyStarted=false;
                            }
                            threadAlredyStarted[0]=false;
                        }                    
                    }).start();                    
                }                
            } 
            public void mouseExited(java.awt.event.MouseEvent evt){
                isHere[0]=false;
            }
            
        });
        txt6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt){                
               /*p1Txt.remove(txt6);
                p1Txt.remove(horStrut);
                p1Txt.remove(horGlue);*/
                p1Txt.removeAll(); //
                if(lArrYears.length!=0){
                    p1Txt.add(lArrYears[0]);
                }
                p1Txt.add(txt1);        
                for(int i=1;i<lArrYears.length;i++){
                    p1Txt.add(lArrYears[i]);
                }
                //p1Txt.add(horGlue);                                
                p1Txt.add(Box.createHorizontalGlue());                                
                jScrollPane2.getViewport().setViewPosition(firstWinPoint[0]); 
                jPanel1.repaint();                
                pack();
            }
        });                        
        return pAll;
    }
    public void repaintAllAds(){
        jPanel1.removeAll();   
        jPanel1.repaint();
        adsForShow=new ArrayList();
        if(jSorting.getSelectedItem().equals("Avito")){
            for(int i=0;i<arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).size();i++){
                if(adsFilterFirst(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).what,arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).city, "static")&&
                   adsFilterSecond(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).descript, arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).name, "static")){
                    if((settings.showOnlyIfWriteLetterIsAvailable&&arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).writeLetterIsAvailable)||!settings.showOnlyIfWriteLetterIsAvailable){
                        //addItemToJPanel1(createNewPAll(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i))); 
                        adsForShow.add(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i));
                    }
                }
            }
        }else{
            ArrayList<Ads> temp=new ArrayList();
            for(int i=0;i<arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).size();i++){
                if(adsFilterFirst(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).what,arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).city, "static")&&
                   adsFilterSecond(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).descript, arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i).name, "static")){
                    temp.add(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(i));                
                }
            }
            temp=adsSorter(temp);
            for(int i=0;i<temp.size();i++){
                if((settings.showOnlyIfWriteLetterIsAvailable&&temp.get(i).writeLetterIsAvailable)||!settings.showOnlyIfWriteLetterIsAvailable){
                    //addItemToJPanel1(createNewPAll(temp.get(i)));                
                    adsForShow.add(temp.get(i));
                }
            }
        }   
        //добавлю тут форму страниц         
        updatePageRibbon("self");
        /*jPanel1.add(Box.createVerticalStrut(25));
        jPanel1.add(pageRibbon);
        for(int i=currPageAdsForShow*settings.adsNumOnPage;
               (i<adsForShow.size()&&i<currPageAdsForShow*settings.adsNumOnPage+settings.adsNumOnPage);
                i++){
            addItemToJPanel1(createNewPAll(adsForShow.get(i)));
        }
        */
        //и тут добавлю форму страниц
    }
    
    /**
     * @param args the command line arguments
     */
    public void parser(String mainUrl, int fromPage, int toPage) throws IOException{
        //ArrayList<forParser> tempArr=new ArrayList();    
        for(int j=fromPage;j<=toPage;j++){            
            System.out.println("Connect to "+j+" page...");           
            statusStr.setText("Connect to "+j+" page...");
            saveLog(curProjPath,"Connect to "+j+" page...");
            //frame2.setTitle(mainUrl+"?&p="+j);
            Connection connect = Jsoup.connect(mainUrl+"&p="+j)
                        .userAgent("Mozilla");   
            //System.out.println(mainUrl+"&p="+j);           
            boolean connected=false;            
            Document doc=null;
            while(!connected){
                try{
                    doc = connect.get(); 
                    connected=true;
                }catch(Exception ex){
                    
                }finally{
                    System.out.println("connected: "+connected);
                    statusStr.setText("connected: "+connected);
                    saveLog(curProjPath,"connected: "+connected);
                    if(!connected){
                        try{
                            Thread.sleep(1000);
                        }catch(Exception ex){

                        }
                    }
                }
            }
            System.out.println("Ok!");
            statusStr.setText("Ok!");
            saveLog(curProjPath,"Ok!");
            Elements select;
         
            select=doc.select(".b-photo");
            String[] arrImgMiddleUrl=new String[select.size()];
            for(int i=0;i<select.size();i++){            
                Element element=select.get(i);
                Elements photoWrapper=element.select(".photo-count-show");
                arrImgMiddleUrl[i]=photoWrapper.attr("src");            
            }

            select=doc.select(".description");
            for(int i=0;i<select.size();i++){
                String name;
                String adsUrl;
                String prise;
                String what="";
                String city="";
                String date;
                String imgMiddleUrl;                  

                imgMiddleUrl=arrImgMiddleUrl[i];
                Element element=select.get(i);
                Elements select2=element.select(".title");
                Elements title=select2.select("a");
                name=title.attr("title");
                adsUrl="https://www.avito.ru"+title.attr("href");            
                prise=element.select(".about").text();
                
                //Element element2=element.get(i);
                Elements data=element.select(".data");
                Elements p=data.select("p");              
                Element singleP;
                if(p.size()>0){
                    singleP=p.get(0);
                    what=singleP.text();
                }
                if(p.size()>1){                 
                    singleP=p.get(1);
                    city=singleP.text();
                }
                Elements time=data.select(".date");
                date=time.text(); 
                if(isFilesChanged){
                    plusCity=plusCityLoader(curProjPath);
                    minusCity=minusCityLoader(curProjPath);
                    plusWhat=plusWhatLoader(curProjPath);
                    minusWhat=minusWhatLoader(curProjPath);
                    minusWords=minusWordsLoader(curProjPath);
                    phrases=phrasesLoader(curProjPath);
                    isFilesChanged=false;
                }
                boolean isSameAds=false;
                int iterCount=0;
                for(int q=arrOfArrVisitedAds.get(paths.indexOf(curProjPath)).size()-1;q>=0;q--){
                        /*if(toMaDateFormat(date)==arrOfArrAds.get(paths.indexOf(curProjPath)).get(q).date
                           &&prise.equals(arrOfArrAds.get(paths.indexOf(curProjPath)).get(q).prise)
                           &&name.equals(arrOfArrAds.get(paths.indexOf(curProjPath)).get(q).name)){
                            isSameAds=true;
                        }*/
                        if(adsUrl.equals(arrOfArrVisitedAds.get(paths.indexOf(curProjPath)).get(q))){
                            isSameAds=true;                            
                        }
                }
                if(!isSameAds){                    
                            for(int z=arrOfArrAds.get(paths.indexOf(curProjPath)).size()-1;z>=0;z--){
                                iterCount++;
                                if(toMaDateFormat(date)==arrOfArrAds.get(paths.indexOf(curProjPath)).get(z).date
                                    &&prise.equals(arrOfArrAds.get(paths.indexOf(curProjPath)).get(z).prise)
                                    &&name.equals(arrOfArrAds.get(paths.indexOf(curProjPath)).get(z).name)){
                                    isSameAds=true;
                                }
                            }                        
                }
                System.out.println(iterCount);                
                if(!isSameAds){
                    arrOfArrVisitedAds.get(paths.indexOf(curProjPath)).add(adsUrl);
                    saveArrOfVisitedAds(arrOfArrVisitedAds.get(paths.indexOf(curProjPath)),curProjPath);
                    if(plusCityChecker(city, plusCity)&&!minusCityChecker(city, minusCity)){
    //       --------Теперь захожу внутрь объявлений и проверяю вторым фильтром по описанию-------------
                        try {
                                    Random random=new Random(System.nanoTime());                        
                                    int delay=random.nextInt(settings.delayTo*1000-settings.delayFrom*1000)+settings.delayFrom*1000;
                                    System.out.println("Sleeping "+delay+" ms...");
                                    statusStr.setText("Sleeping "+delay+" ms...");
                                    th.sleep(delay);    

                                    /*System.out.println("собираюсь остановить");                                
                                    th.suspend();
                                    System.out.println("но он не остановился");  */
                        } catch (InterruptedException ex) {
                            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }                    
                        System.out.println("Connect to "+adsUrl);
                        statusStr.setText("Connect to "+adsUrl);
                        saveLog(curProjPath,"Connect to "+adsUrl);
                        //Document doc2 = Jsoup.connect(adsUrl).userAgent("Mozilla").get();
                        connect = Jsoup.connect(adsUrl)
                                    .userAgent("Mozilla");                                 
                        connected=false;            
                        Document doc2=null;
                        int counter=1;
                        while(!connected&&counter<20){
                            try{
                                doc2 = connect.get(); 
                                connected=true;
                            }catch(Exception ex){
                                System.out.println(ex);
                            }finally{
                                System.out.println("connected: "+connected+" (попытка №"+counter+")");
                                statusStr.setText("connected: "+connected+" (попытка №"+counter+")");
                                saveLog(curProjPath,"connected: "+connected+" (попытка №"+counter+")");
                                if(!connected){
                                    try{
                                        counter++;
                                        Thread.sleep(1000);
                                    }catch(Exception ex){

                                    }
                                }
                            }
                        }
                        if(counter>=20){
                            arrOfArrAds.get(paths.indexOf(curProjPath)).add(new Ads(adsUrl,adsUrl,"0","Ошибка доступа","",toMaDateFormat(date), "Ошибка доступа",
                                                yearsSearcher(""),false,
                                                curProjPath+"\\картинки\\средние\\",
                                                curProjPath+"\\картинки\\большие\\",
                                                new String[0]));
                            saveAds(arrOfArrAds.get(paths.indexOf(curProjPath)),curProjPath);                            
                            if(curProjPath.equals((String)jComboBox1.getSelectedItem())&&arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).size()>0){                                                                
                                adsForShow.add(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).size()-1));
                                updatePageRibbon("Parser");                                
                            }
                        }else{                                                    
                            System.out.println("Ok");

                            //нахожу главный текст, и пропускаю через фильтр. Если он подходит, то качаю картинки
                            Elements addParams=doc2.select(".item-params");
                            String descript="";
                            for(int k=0;k<addParams.size();k++){
                                if(addParams.get(k).text().length()>0){
                                    descript+=addParams.get(k).text()+"\n";
                                }
                            }
                            //System.out.println(addParams.text());
                            //String descript=addParams.text()+"\n";
                            Elements mainText=doc2.select("#desc_text");
                            descript+=mainText.select("p").toString().replaceAll("<br>", "\n").replaceAll("<p>", "").replaceAll("</p>", "\n").replaceAll("&nbsp;", " ");
                            mainText=doc2.select(".description-content");                    
                            //descript+=mainText.select("p").toString().replaceAll("<br>", "\n").replaceAll("<p>", "").replaceAll("</p>", "\n").replaceAll("&nbsp;", " ");
                            descript+=mainText.text().replaceAll("<br>", "\n").replaceAll("<p>", "").replaceAll("</p>", "\n").replaceAll("&nbsp;", " ");


                            Elements seller=doc2.select("#seller");
                            what=seller.text();
                            Elements map=doc2.select("#map");
                            city=map.text();

                            //проверяю, возможно ли написать продавцу
                            boolean writeLetterIsAvailable=false;                        
                            Elements btnText=doc2.select(".btn__text");
                            for(int q=0;q<btnText.size();q++){                                                        
                                if((btnText.get(q).text()).equals("Написать сообщение")){
                                    writeLetterIsAvailable=true;
                                }            
                            }
                            System.out.println(writeLetterIsAvailable);
                            if(isFilesChanged){
                                plusCity=plusCityLoader(curProjPath);
                                minusCity=minusCityLoader(curProjPath);
                                plusWhat=plusWhatLoader(curProjPath);
                                minusWhat=minusWhatLoader(curProjPath);
                                minusWords=minusWordsLoader(curProjPath);
                                phrases=phrasesLoader(curProjPath);
                                isFilesChanged=false;
                            }                                        
                            if(adsFilterFirst(what,city, "dinamic")&&adsFilterSecond(descript, name, "dinamic")){                            
                                //загружаю среднюю картинку
                                if(imgMiddleUrl.length()!=0){                                                                                                
                                    System.out.println("Download imgMiddle...");
                                    statusStr.setText("Download imgMiddle...");
                                    saveLog(curProjPath,"Download imgMiddle...");
                                    try{
                                        imgMiddleUrl=imgDownloader("http:"+imgMiddleUrl, "средние");
                                    }
                                    catch(Exception ex){
                                        System.out.println("Download FAILED");
                                        statusStr.setText("Download FAILED");
                                    }
                                    try {
                                        Random random=new Random(System.nanoTime());                        
                                        int delay=random.nextInt(1000);
                                        System.out.println("Sleeping "+delay+" ms...");
                                        statusStr.setText("Sleeping "+delay+" ms...");
                                        th.sleep(delay);    

                                            /*System.out.println("собираюсь остановить");                                
                                            th.suspend();
                                            System.out.println("но он не остановился");  */
                                    } catch (InterruptedException ex) {
                                        Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                                //нахожу большую картинку, и если нашёл - качаю
                                Elements classBigImg=doc2.select(".js-zoom-gallery-init");                    
                                String imgBigUrl=classBigImg.attr("src");
                                if(imgBigUrl.length()!=0){
                                    System.out.println("Download imgBig...");
                                    statusStr.setText("Download imgBig...");
                                    try{
                                        imgBigUrl=imgDownloader("http:"+imgBigUrl, "большие");                    
                                    }
                                    catch(Exception ex){
                                        System.out.println("Download FAILED");
                                        statusStr.setText("Download FAILED");
                                    }
                                }
                                //ищу маленькие картинки, и если нахожу - качаю
                                Elements classSmallImgl1=doc2.select(".gallery-image");
                                String[] arrImgSmallUrl=new String[classSmallImgl1.size()/2];// делю на 2, потому что там всплавает к каждой картинке ещё какое-то говно
                                for(int k=0;k<classSmallImgl1.size()/2;k++){
                                    element=classSmallImgl1.get(k);                        
                                    arrImgSmallUrl[k]=element.attr("src");
                                    if(arrImgSmallUrl[k].length()!=0){
                                        System.out.println("Download imgSmalls...");
                                        statusStr.setText("Download imgSmalls...");
                                        try{
                                            arrImgSmallUrl[k]=curProjPath+"\\картинки\\маленькие\\"+imgDownloader("http:"+arrImgSmallUrl[k], "маленькие"); 
                                            }
                                        catch(Exception ex){
                                            System.out.println("Download FAILED");
                                            statusStr.setText("Download FAILED");
                                        }
                                        try {
                                            Random random=new Random(System.nanoTime());                        
                                            int delay=random.nextInt(200);
                                            System.out.println("Sleeping "+delay+" ms...");
                                            statusStr.setText("Sleeping "+delay+" ms...");
                                            th.sleep(delay);
                                        } catch (InterruptedException ex) {
                                            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                }     
                                ArrayList<String> years=yearsSearcher(descript);
                                if(years.size()==0)years=yearsSearcher(name);
                                arrOfArrAds.get(paths.indexOf(curProjPath)).add(new Ads(adsUrl,name,prise,what,city,toMaDateFormat(date), descript,
                                                years,writeLetterIsAvailable,
                                                curProjPath+"\\картинки\\средние\\"+imgMiddleUrl,
                                                curProjPath+"\\картинки\\большие\\"+imgBigUrl,
                                                arrImgSmallUrl));
                                saveAds(arrOfArrAds.get(paths.indexOf(curProjPath)),curProjPath);                            
                                if(curProjPath.equals((String)jComboBox1.getSelectedItem())&&arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).size()>0){
                                    if((settings.showOnlyIfWriteLetterIsAvailable&&writeLetterIsAvailable)||!settings.showOnlyIfWriteLetterIsAvailable){
                                        //addItemToJPanel1(createNewPAll(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).size()-1)));
                                        adsForShow.add(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).size()-1));
                                        updatePageRibbon("Parser");
                                        /*if(currPageAdsForShow==adsForShow.size()/(settings.adsNumOnPage+1)){
                                            addItemToJPanel1(createNewPAll(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).get(arrOfArrAds.get(paths.indexOf(jComboBox1.getSelectedItem())).size()-1)));
                                        }*/
                                    }
                                }
                                //jPanel1.repaint();
                                //frame2.pack();
                                /*arrAds.add(new Ads(adsUrl,name,prise,what,city,date, descript,
                                                curProjPath+"\\картинки\\средние\\"+imgMiddleUrl,
                                                curProjPath+"\\картинки\\большие\\"+imgBigUrl,
                                                arrImgSmallUrl));
                                    addItemToJPanel1(createNewPAll(arrAds.get(arrAds.size()-1))); */
                            }  
                        }
                    } 
                }
            }
        }
    }    
    public boolean adsFilterFirst(String what, String city, String type){   
        if(type.equals("dinamic")){
            if(minusCityChecker(city, minusCity)||minusWhatChecker(what, minusWhat)){
                return false;
            }
            else{
                if(plusCityChecker(city, plusCity)&&plusWhatChecker(what, plusWhat)){
                    return true;
                }
            }            
        }
        if(type.equals("static")){
            if(minusCityChecker(city, minusCityStatic)||minusWhatChecker(what, minusWhatStatic)){
                return false;
            }
            else{
                if(plusCityChecker(city, plusCityStatic)&&plusWhatChecker(what,plusWhatStatic)){
                    return true;
                }
            }            
        }
        return false;
    }
    public boolean adsFilterSecond(String description, String name, String type){
        if(type.equals("dinamic")){
            if(minusWords(description, minusWords)||minusWords(name, minusWords))return false;
            else{            
                if(phrases(description, phrases)||phrases(name, phrases)) return true;
            }
        }
        if(type.equals("static")){
            if(minusWords(description,minusWordsStatic)||minusWords(name,minusWordsStatic))return false;
            else{            
                if(phrases(description,phrasesStatic)||phrases(name,phrasesStatic)) return true;
            }
        }
        return false;
    }
    public boolean minusWords(String description, String minusWordsType){        
        if(minusWordsType.length()==0)return false;
        else{
            MinusWordsFilter minusWordsFilter=new MinusWordsFilter(description,minusWordsType,new char[3]);
            if(minusWordsFilter.test137())return true;
        }
        return false;
    }
    public boolean phrases(String description, String phrasesType){
        if(phrasesType.length()==0) return true;
        else{
            //TO DO...
            PlusPhrasesFilter plusPhrasesFilter=new PlusPhrasesFilter(description,phrasesType,new char[3]);
            if(plusPhrasesFilter.test136())return true;
        }
        return false;
    }
    //Если такой город есть в списке плюсгородов, то вернуть тру
    public boolean plusCityChecker(String city, ArrayList<String> plusCityType){
        if(plusCityType.size()==0||!checkCityPlus.isSelected()){
            return true; /*типа если этот ArrayList пустой, то и вайл был пустой, а значит приоритета на город нет
            и его можно добавлять т.к. проверку на его наличие в минус городах он уже прошёл.
            */
        }else{
            for(int i=0;i<plusCityType.size();i++){
                if(city.toUpperCase().indexOf(plusCityType.get(i).toUpperCase())!=-1) return true;
            }
        }        
        return false;/*если мы дошли аж до сюда, то в цыкле выше города не нашлось и можно возвращать false*/
    }
    //Если такой город есть в списке минусгородов, то вернуть тру
    public boolean minusCityChecker(String city, ArrayList<String> minusCityType){  
        if(minusCityType.size()==0||!checkCityMinus.isSelected()){
            return false;
        }else{
            for(int i=0;i<minusCityType.size();i++){
                if(city.toUpperCase().indexOf(minusCityType.get(i).toUpperCase())!=-1) return true;
            }
        }
        return false;
    }
    //Если такая компания есть в списке плюскомпаний, то вернуть тру
    public boolean plusWhatChecker(String what, ArrayList<String> plusWhatType){
        if(plusWhatType.size()==0||!checkCompanyPlus.isSelected()){
            return true;
        }else{
            for(int i=0;i<plusWhatType.size();i++){
                if(what.toUpperCase().indexOf(plusWhatType.get(i).toUpperCase())!=-1) return true;
            }
        }        
        return false;
    }
    //Если такая компания есть в списке минускомпаний, то вернуть тру
    public boolean minusWhatChecker(String what, ArrayList<String> minusWhatType){
        if(minusWhatType.size()==0||!checkCompanyMinus.isSelected()){
            return false;
        }else{
            for(int i=0;i<minusWhatType.size();i++){
                if(what.toUpperCase().indexOf(minusWhatType.get(i).toUpperCase())!=-1) return true;
            }
        }
        return false;
    }
    //метод сортировки
    public int getPrise(String prise){        
        StringBuffer strBuf= new StringBuffer(prise);
        for(int k=0;k<strBuf.length();k++){
            if(strBuf.charAt(k)==160||strBuf.charAt(k)==' '){                                
                strBuf.deleteCharAt(k);
            }                            
        }
        if(strBuf.length()!=0){
            return Integer.parseInt(strBuf.substring(0, strBuf.indexOf("руб")));        
        }else{
            return 999999999;
        }
    }
    public ArrayList<Ads> adsSorter(ArrayList<Ads> temp){
        int newestDate=0;
        int prise=999999999;
        int newestAdsIndex=0;
        Ads bufAds;
        String priseStr;
        if(jSorting.getSelectedItem().equals("по дате и цене")){            
            for(int i=0;i<temp.size();i++){
                for(int j=i;j<temp.size();j++){
                    if(Integer.parseInt((""+temp.get(j).date).substring(0, 6))>newestDate){
                        newestDate=Integer.parseInt((""+temp.get(j).date).substring(0, 6));                
                        newestAdsIndex=j;
                        prise=getPrise(temp.get(j).prise);                         
                    }else{
                        if(Integer.parseInt((""+temp.get(j).date).substring(0, 6))==newestDate&&getPrise(temp.get(j).prise)<=prise){
                            newestAdsIndex=j;
                            prise=getPrise(temp.get(j).prise); 
                        }
                    }                       
                    /*bufAds=new Ads(temp.get(i).adsUrl,temp.get(i).name,temp.get(i).prise,temp.get(i).what,
                                   temp.get(i).city,temp.get(i).date,temp.get(i).descript,temp.get(i).imgMiddle,
                                    temp.get(i).imgBig,temp.get(i).arrImgSmall);*/                    
                }
                bufAds=temp.get(i);
                temp.set(i, temp.get(newestAdsIndex));
                temp.set(newestAdsIndex,bufAds);                
                newestDate=0;
                prise=999999999;
                //System.out.println(temp.get(i).date+"  "+temp.get(i).prise);
            }
        }     
        if(jSorting.getSelectedItem().equals("по дате")){
            for(int i=0;i<temp.size();i++){
                for(int j=i;j<temp.size();j++){
                    if(Integer.parseInt(""+temp.get(j).date)>Integer.parseInt(""+temp.get(i).date)){                        
                        bufAds=temp.get(i);
                        temp.set(i, temp.get(j));
                        temp.set(j,bufAds);
                    }
                }
            }
        } 
        if(jSorting.getSelectedItem().equals("по цене")){
            for(int i=0;i<temp.size();i++){
                for(int j=i;j<temp.size();j++){
                    if(getPrise(temp.get(j).prise)<getPrise(temp.get(i).prise)){                        
                        bufAds=temp.get(i);
                        temp.set(i, temp.get(j));
                        temp.set(j,bufAds);
                    }
                }
            }
        } 
        return temp;
    }
    public ArrayList<String> yearsSearcher(String descript){
        String[] arrYears=new String[]{
            "1980","1981","1982","1983","1984",
            "1985","1986","1987","1988","1989",
            "1990","1991","1992","1993","1994",
            "1995","1996","1997","1998","1999",
            "2000","2001","2002","2003","2004",
            "2005","2006","2007","2008","2009",
            "2010","2011","2012","2013","2014",
            "2015","2016","2017","2018","2019",
        };
        ArrayList<String> years=new ArrayList();
        for(int i=0;i<arrYears.length;i++){
            if(descript.indexOf(arrYears[i])!=-1){
                years.add(arrYears[i]);
            }
        }               
        return years;
    }
    public ArrayList<String> yearsSorter(ArrayList<String> years, String metod){
        String bufYear;        
        if(metod.equals("По возрастанию")){            
            for(int i=0;i<years.size();i++){
                for(int j=i;j<years.size();j++){
                    if(Integer.parseInt(years.get(j))<Integer.parseInt(years.get(i))){                        
                        bufYear=years.get(i);
                        years.set(i, years.get(j));
                        years.set(j,bufYear);
                    }
                }
            }
        }
        if(metod.equals("По убыванию")){            
            for(int i=0;i<years.size();i++){
                for(int j=i;j<years.size();j++){
                    if(Integer.parseInt(years.get(j))>Integer.parseInt(years.get(i))){                        
                        bufYear=years.get(i);
                        years.set(i, years.get(j));
                        years.set(j,bufYear);
                    }
                }
            }
        }
        return years;
    }
    /*для проекта (папки), которая становится текущей инициализируются массивы с городами, фирмами,
    фразами, и т.д....
    */
    public ArrayList<String> plusCityLoader(String curProjPath) throws UnsupportedEncodingException, FileNotFoundException, IOException{
        File f=new File(curProjPath+"\\_настройки\\плюс города.txt");
        ArrayList<String> plusCity=new ArrayList();
        if(f.length()!=0){
            plusCity=new ArrayList();            
            BufferedReader br = new BufferedReader (
                                    new InputStreamReader(
                                            new FileInputStream(curProjPath+"\\_настройки\\плюс города.txt"), "windows-1251"));
            String line = null;
            while ((line = br.readLine()) != null) {    
                for(int i=0;i<line.length();i++){
                    if(line.charAt(i)=='/'){
                        line=line.substring(0,i);                        
                    }
                }
                line=line.trim();
                if(line.length()>0){
                    System.out.println("Плюс города\n"+line);
                    plusCity.add(line);
                }
            }
            br.close();
        }
        return plusCity;
    }
    public ArrayList<String> minusCityLoader(String curProjPath) throws UnsupportedEncodingException, FileNotFoundException, IOException{
        File f=new File(curProjPath+"\\_настройки\\минус города.txt");
        ArrayList<String> minusCity=new ArrayList();
        if(f.length()!=0){
            minusCity=new ArrayList();            
            BufferedReader br = new BufferedReader (
                                    new InputStreamReader(
                                            new FileInputStream(curProjPath+"\\_настройки\\минус города.txt"), "windows-1251"));
            String line = null;
            while ((line = br.readLine()) != null) {                
                for(int i=0;i<line.length();i++){
                    if(line.charAt(i)=='/'){
                        line=line.substring(0,i);                        
                    }
                }
                line=line.trim();
                if(line.length()>0){
                    System.out.println("Минус города\n"+line);
                    minusCity.add(line);
                }
            }
            br.close();
        }
        return minusCity;
    }
    public ArrayList<String> plusWhatLoader(String curProjPath) throws UnsupportedEncodingException, FileNotFoundException, IOException{
        File f=new File(curProjPath+"\\_настройки\\плюс компании.txt");
        ArrayList<String> plusWhat=new ArrayList();
        if(f.length()!=0){
            plusWhat=new ArrayList();            
            BufferedReader br = new BufferedReader (
                                    new InputStreamReader(
                                            new FileInputStream(curProjPath+"\\_настройки\\плюс компании.txt"), "windows-1251"));
            String line = null;
            while ((line = br.readLine()) != null) {                
                for(int i=0;i<line.length();i++){
                    if(line.charAt(i)=='/'){
                        line=line.substring(0,i);                        
                    }
                }
                line=line.trim();
                if(line.length()>0){
                    System.out.println("Плюс компании\n"+line);
                    plusWhat.add(line);
                }
            }
            br.close();
        }
        return plusWhat;
    }
    public ArrayList<String> minusWhatLoader(String curProjPath) throws UnsupportedEncodingException, FileNotFoundException, IOException{
        File f=new File(curProjPath+"\\_настройки\\минус компании.txt");
        ArrayList<String> minusWhat=new ArrayList();
        if(f.length()!=0){
            minusWhat=new ArrayList();            
            BufferedReader br = new BufferedReader (
                                    new InputStreamReader(
                                            new FileInputStream(curProjPath+"\\_настройки\\минус компании.txt"), "windows-1251"));
            String line = null;
            while ((line = br.readLine()) != null) {                
                for(int i=0;i<line.length();i++){
                    if(line.charAt(i)=='/'){
                        line=line.substring(0,i);                        
                    }
                }
                line=line.trim();
                if(line.length()>0){
                    System.out.println("Минус компании\n"+line);
                    minusWhat.add(line);
                }
            }
            br.close();
        }
        return minusWhat;
    }
    public String minusWordsLoader(String curProjPath) throws UnsupportedEncodingException, FileNotFoundException, IOException{
        File f=new File(curProjPath+"\\_настройки\\минус слова.txt");
        String minusWords="";
        if(f.length()!=0){                 
            BufferedReader br = new BufferedReader (
                                    new InputStreamReader(
                                            new FileInputStream(curProjPath+"\\_настройки\\минус слова.txt"), "windows-1251"));
            String line = null;
            while ((line = br.readLine()) != null) {                
                for(int i=0;i<line.length();i++){
                    if(line.charAt(i)=='/'){
                        line=line.substring(0,i);                        
                    }
                }
                line=line.trim();
                if(line.length()>0){                    
                    minusWords+=line+"\n";                    
                }                
            }
            br.close();
            minusWords=minusWords.replaceAll("\n", " ").trim();
            System.out.println("Минус слова\n"+minusWords);
        }
        return minusWords;
    }
    public String phrasesLoader(String curProjPath) throws UnsupportedEncodingException, FileNotFoundException, IOException{
        File f=new File(curProjPath+"\\_настройки\\фразы.txt");
        String phrases="";
        if(f.length()!=0){                 
            BufferedReader br = new BufferedReader (
                                    new InputStreamReader(
                                            new FileInputStream(curProjPath+"\\_настройки\\фразы.txt"), "windows-1251"));
            String line = null;
            while ((line = br.readLine()) != null) {                
                for(int i=0;i<line.length();i++){
                    if(line.charAt(i)=='/'&&line.charAt(i+1)=='/'){
                        line=line.substring(0,i);                        
                    }
                }
                line=line.trim();
                if(line.length()>0){                    
                    phrases+=line+"\n";                    
                }                
            }
            br.close();
            phrases=phrases.replaceAll("\n", " ").trim();
            System.out.println("Фразы\n"+phrases);
        }
        /*File f=new File(curProjPath+"\\_настройки\\фразы.txt");
        String phrases="";
        if(f.length()!=0){            
            InputStream is = new BufferedInputStream (                                    
                                new FileInputStream(curProjPath+"\\_настройки\\фразы.txt"));
            int count;
            byte[] bytesReaded=new byte[1024];
            while ((count = is.read(bytesReaded)) != -1) {                
                phrases+=new String(bytesReaded,0,count,"cp1251");
            }
            for(int i=0;i<phrases.length();i++){
                if(phrases.charAt(i)=='/'&&phrases.charAt(i+1)=='/'){
                    phrases=phrases.substring(0,i);                        
                }
            }
            is.close();
            System.out.println("Фразы\n"+phrases);
        }*/
        return phrases;
    }
    public void initDataForCurProj(String curProjPath) throws FileNotFoundException, IOException{
        
        plusCity=plusCityLoader(curProjPath);
        minusCity=minusCityLoader(curProjPath);
        plusWhat=plusWhatLoader(curProjPath);
        minusWhat=minusWhatLoader(curProjPath);
        minusWords=minusWordsLoader(curProjPath);
        phrases=phrasesLoader(curProjPath);
        //Теперь надо вытащить из файла ссылки для парсинга
        File f=new File(curProjPath+"\\_настройки\\список ссылок для парсинга.txt");
        if(f.length()!=0){
            urlsForCurProj=new ArrayList();  
            fromPage=new ArrayList();
            toPage=new ArrayList();
            BufferedReader br = new BufferedReader (
                                    new InputStreamReader(
                                            new FileInputStream(curProjPath+"\\_настройки\\список ссылок для парсинга.txt"), "windows-1251"));
            String line = null;
            while ((line = br.readLine()) != null) { 
                for(int i=0;i<line.length();i++){
                    if(line.charAt(i)=='/'&&i==0){
                        line=line.substring(0,i);                        
                        break;
                    }
                    if(line.charAt(i)=='/'&&line.charAt(i-1)!=':'&&line.charAt(i-1)!='/'&&i+1<line.length()&&line.charAt(i+1)=='/'){
                        line=line.substring(0,i);    
                        break;
                    }
                }
                line=line.trim();
                if(line.length()>0){
                    System.out.println("Список ссылок\n"+line);                    
                    int spaceIndex;
                    String space=" ";
                    spaceIndex=line.indexOf(space,0);
                    urlsForCurProj.add( line.substring(0,spaceIndex));                
                    line=line.substring(spaceIndex+space.length(),line.length());                

                    spaceIndex=line.indexOf(space,0);
                    fromPage.add(Integer.parseInt(line.substring(0,spaceIndex)));                
                    line=line.substring(spaceIndex+space.length(),line.length());

                    spaceIndex=line.indexOf(space,0);
                    if(spaceIndex==-1)spaceIndex=line.length();
                    toPage.add(Integer.parseInt(line.substring(0,spaceIndex))); 
                }                                               
            }
            br.close();
        }        
    }
    public boolean copyFile(String sourcePath, String destPath) {
        File f=new File(destPath);
        if(f.exists()){ 
            System.out.println("Уже существует");
            return false;
        }
        FileInputStream is = null;
        FileOutputStream os = null;
        try {
            is = new FileInputStream(sourcePath);
            os = new FileOutputStream(destPath);
            int nLength;
            byte[] buf = new byte[8000];
            while (true) {
                nLength = is.read(buf);
                if (nLength < 0) {
                    break;
                }
                os.write(buf, 0, nLength);
            }
            return true;
        } catch (IOException ex) {
             
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (Exception ex) {
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (Exception ex) {
                }
            }
        }
        return false;
    }
    public void saveLog(String path, String strToWrite){
        try(FileWriter writer = new FileWriter(path+"\\объявления\\Log.txt", true))
        {
           // запись всей строки           
            writer.write(strToWrite);
            // запись по символам
            writer.append("\r\n");            
            writer.flush();
            writer.close();
        }
        catch(IOException ex){
             
            System.out.println(ex.getMessage());
        } 
    }
    public void saveFile(String path, String strForWrite) throws IOException{ 
        BufferedWriter br = new BufferedWriter (
                                    new OutputStreamWriter(
                                            new FileOutputStream(path), "windows-1251"));
        System.out.println(strForWrite);
        br.write(strForWrite, 0, strForWrite.length());
        br.flush();
        br.close();        
    }
    public void saveAds(ArrayList<Ads> arrAds,String path){
        FileOutputStream fos;        
        ObjectOutputStream oos;
        try {
            fos = new FileOutputStream(path+"\\объявления\\Объявления.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(arrAds);
            oos.flush();
            oos.close();
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void saveArrOfVisitedAds(ArrayList<String> arrOfVisitedAds,String path){
        FileOutputStream fos;        
        ObjectOutputStream oos;
        try {
            fos = new FileOutputStream(path+"\\объявления\\Проверенные.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(arrOfVisitedAds);
            oos.flush();
            oos.close();
        } catch (IOException ex) {
            saveLog(curProjPath,"File saving error");
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public ArrayList<Ads> loadArrAds(String path){                
        ArrayList<Ads> arrAds=new ArrayList();
        File f=new File(path+"\\объявления");
        if(!f.exists()){            
            f.mkdir();
        }
        f=new File(path+"\\объявления\\Объявления.out");
        if(!f.exists()){            
            try {
                f.createNewFile();                
            } catch (IOException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(f.length()==0){            
            return arrAds;            
        }
        ObjectInputStream oin;
        try {
            FileInputStream fis = new FileInputStream(path+"\\объявления\\Объявления.out");            
            oin = new ObjectInputStream(fis);                        
            arrAds=(ArrayList<Ads>)oin.readObject();            
            return arrAds;
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return arrAds;
    }
    public ArrayList<String> loadArrOfVisitedAds(String path){                
        ArrayList<String> arrOfVisitedAds=new ArrayList();
        File f=new File(path+"\\объявления");
        if(!f.exists()){            
            f.mkdir();
        }
        f=new File(path+"\\объявления\\Проверенные.out");
        if(!f.exists()){            
            try {
                f.createNewFile();                
            } catch (IOException ex) {
                Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(f.length()==0){            
            return arrOfVisitedAds;            
        }
        ObjectInputStream oin;
        try {
            FileInputStream fis = new FileInputStream(path+"\\объявления\\Проверенные.out");            
            oin = new ObjectInputStream(fis);                        
            arrOfVisitedAds=(ArrayList<String>)oin.readObject();            
            return arrOfVisitedAds;
        } catch (IOException ex) {
            saveLog(curProjPath,"File reading error");
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);            
        } catch (ClassNotFoundException ex) {
            saveLog(curProjPath,"File reading error");
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return arrOfVisitedAds;
    }
    public int toMaDateFormat(String avitoDateFormat){
        int maDateFormat=0;
        String year;
        String month;
        String day;
        String time;
        String today;
        Calendar cal;
        cal = Calendar.getInstance();
        if(avitoDateFormat.toUpperCase().indexOf("СЕГОДНЯ")!=-1){            
            cal.add(Calendar.DATE, 0);
            today=DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(cal.getTime());                            
            today=today.substring(0, today.indexOf(" "));
            //System.out.println(today);        
            day=today.substring(0,2);
            month=today.substring(3,5);
            year=today.substring(6,8);
            time=(avitoDateFormat.substring(avitoDateFormat.indexOf(" ")+1, avitoDateFormat.length()).replaceAll(":", ""));
            maDateFormat=Integer.parseInt(year+month+day+time);            
        }else{   
            if(avitoDateFormat.toUpperCase().indexOf("ВЧЕРА")!=-1){                             
                cal.add(Calendar.DATE, -1);
                today=DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(cal.getTime());                            
                today=today.substring(0, today.indexOf(" "));
                //System.out.println(today);        
                day=today.substring(0,2);
                month=today.substring(3,5);
                year=today.substring(6,8);
                time=(avitoDateFormat.substring(avitoDateFormat.indexOf(" ")+1, avitoDateFormat.length()).replaceAll(":", ""));
                maDateFormat=Integer.parseInt(year+month+day+time);                
            }else{
                year=""+cal.get(1);
                year=year.substring(2,year.length());        
                day=avitoDateFormat.substring(0, avitoDateFormat.indexOf(" "));        
                if(day.length()<2)day="0"+day;
                avitoDateFormat=avitoDateFormat.substring(avitoDateFormat.indexOf(" ")+1, avitoDateFormat.length());
                month=avitoDateFormat.substring(0, avitoDateFormat.indexOf(" "));
                switch(month){
                    case "января":{month="01";break;}
                    case "февраля":{month="02";break;}
                    case "марта":{month="03";break;}
                    case "апреля":{month="04";break;}
                    case "мая":{month="05";break;}
                    case "июня":{month="06";break;}
                    case "июля":{month="07";break;}
                    case "августа":{month="08";break;}
                    case "сентября":{month="09";break;}
                    case "октября":{month="10";break;}
                    case "ноября":{month="11";break;}
                    case "декабря":{month="12";break;}
                }
                time=(avitoDateFormat.substring(avitoDateFormat.indexOf(" ")+1, avitoDateFormat.length()).replaceAll(":", ""));        
                maDateFormat=Integer.parseInt(year+month+day+time);
            }
        }
        return maDateFormat;
    }
    public String toAvitoDateFormat(int maDateFormat){
        String avitoDateFormat=""+maDateFormat;
        String year;
        String month;
        String day;
        String time;
        String today;
        String yesterday;
        Calendar cal;
        cal = Calendar.getInstance(); 
        cal.add(Calendar.DATE, 0);
        today=DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(cal.getTime());          
        cal = Calendar.getInstance(); 
        cal.add(Calendar.DATE, -1);
        yesterday=DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(cal.getTime());          
        month=avitoDateFormat.substring(2,4);
        day=avitoDateFormat.substring(4, 6);
        time=avitoDateFormat.substring(6, avitoDateFormat.length());
        time=time.substring(0,2)+":"+time.substring(2,4);
        if(today.substring(0, 2).equals(day)&&today.substring(3, 5).equals(month)){
            avitoDateFormat="Сегодня"+" "+time;
        }else{
            if(yesterday.substring(0, 2).equals(day)&&yesterday.substring(3, 5).equals(month)){
                avitoDateFormat="Вчера"+" "+time;
            }else{
                switch(month){
                    case "01":{month="января";break;}
                    case "02":{month="февраля";break;}
                    case "03":{month="марта";break;}
                    case "04":{month="апреля";break;}
                    case "05":{month="мая";break;}
                    case "06":{month="июня";break;}
                    case "07":{month="июля";break;}
                    case "08":{month="августа";break;}
                    case "09":{month="сентября";break;}
                    case "10":{month="октября";break;}
                    case "11":{month="ноября";break;}
                    case "12":{month="декабря";break;}
                }
                //System.out.println(month);
                day=avitoDateFormat.substring(4, 6);
                if(day.charAt(0)=='0')day=day.substring(1,day.length()); 
                avitoDateFormat=day+" "+month+" "+time;
            }
        }               
        return avitoDateFormat;
    }
    public void createrImgDirectories(String curProjPath){
        File f=new File(curProjPath+"\\картинки");
        if(!f.exists()){            
            f.mkdir();
        }
        f=new File(curProjPath+"\\картинки\\маленькие");
        if(!f.exists()){            
            f.mkdir();
        }
        f=new File(curProjPath+"\\картинки\\средние");
        if(!f.exists()){            
            f.mkdir();
        }
        f=new File(curProjPath+"\\картинки\\большие");
        if(!f.exists()){            
            f.mkdir();
        }
        //Files.exists(new Pz`ath(curProjPath+"\\картинки\\маленькие"));        
    }
    public String imgDownloader(String imgUrl, String categorie) throws IOException{
        final URLConnection conn = new URL(imgUrl).openConnection();                
        final int len = conn.getContentLength();
        if (len > 0) {
            /* read data */
            final byte[] imageData = new byte[len];
            final InputStream inputStream = conn.getInputStream();
            try {
                int readed = 0;
                do {
                    readed += inputStream.read(imageData, readed, len - readed);
                } while(readed < len);
            } finally {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            /* write data */
            new Thread(new Runnable(){
                public void run(){
                    OutputStream outputStream = null;           
                    try {
                        outputStream = new FileOutputStream(curProjPath+"\\картинки\\"+categorie+"\\"+imgUrl.replaceAll("/", "").replaceAll(":", ""));
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        try {
                            outputStream.write(imageData);
                        } catch (IOException ex) {
                            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } finally {
                        try {
                            outputStream.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                            //System.out.println("ошибка в строке 941");
                        }
                    }
                }
            }).start();
            

        } else {
            System.out.println("Net sodergimogo ili no connection");
        }
        return imgUrl.replaceAll("/", "").replaceAll(":", "");
    }   
    public void actionsAfterProjLoad(){
        btnStart.setEnabled(true);
        btnPhrases.setEnabled(true);
        btnWords.setEnabled(true);
        btnCityPlus.setEnabled(true);
        btnCityMinus.setEnabled(true);
        btnCompanyMinus.setEnabled(true);
        btnCompanyPlus.setEnabled(true);
        btnRefresh.setEnabled(true);
        checkCityPlus.setEnabled(true);
        checkCityMinus.setEnabled(true);
        checkCompanyPlus.setEnabled(true);
        checkCompanyMinus.setEnabled(true);
        jSorting.setEnabled(true);
        permissionTojComboBox1ItemStateChange=false;
        jComboBox1.removeAllItems();
        arrOfArrAds=new ArrayList();
        for(int i=0;i<paths.size();i++){                
                    System.out.println(paths.get(i));  
                    jComboBox1.addItem(paths.get(i)); 
                    //TO DO...
                    //сюда я буду вставлять массив объявлений, загруженный из файла.
                    arrOfArrAds.add(loadArrAds(paths.get(i)));
                    arrOfArrVisitedAds.add(loadArrOfVisitedAds(paths.get(i)));
        }         
        permissionTojComboBox1ItemStateChange=true;
        frame2.setTitle((String)jComboBox1.getSelectedItem()); 
        jPanel1.removeAll();
        
        try{
            plusCity=plusCityLoader((String)jComboBox1.getSelectedItem());
            minusCity=minusCityLoader((String)jComboBox1.getSelectedItem());
            plusWhat=plusWhatLoader((String)jComboBox1.getSelectedItem());
            minusWhat=minusWhatLoader((String)jComboBox1.getSelectedItem());
            minusWords=minusWordsLoader((String)jComboBox1.getSelectedItem());
            phrases=phrasesLoader((String)jComboBox1.getSelectedItem());
            
            plusCityStatic=plusCity;
            minusCityStatic=minusCity;
            plusWhatStatic=plusWhat;
            minusWhatStatic=minusWhat;
            minusWordsStatic=minusWords;
            phrasesStatic=phrases;
        }catch(Exception ex){
            
        }   
        pageRibbon.setBackground(settings.jPanel1BackColor);
        pageRibbon.setLayout(new BoxLayout(pageRibbon, BoxLayout.X_AXIS));        
        repaintAllAds();
        isLoaded=true;          
        //jPanel1.setFocused();
        //jPanel1.getFocusListeners();
        /*jPanel1.setFocusable(true);
        jPanel1.setFocusTraversalPolicyProvider(true);
        jPanel1.setFocusCycleRoot(true);
        jPanel1.setFocusTraversalKeysEnabled(true);*/
    }
    private ArrayList<String> plusCity=new ArrayList();
    private ArrayList<String> minusCity=new ArrayList();
    private ArrayList<String> plusWhat=new ArrayList();
    private ArrayList<String> minusWhat=new ArrayList();
    private String minusWords;
    private String phrases;
    private ArrayList<String> plusCityStatic=new ArrayList();
    private ArrayList<String> minusCityStatic=new ArrayList();
    private ArrayList<String> plusWhatStatic=new ArrayList();
    private ArrayList<String> minusWhatStatic=new ArrayList();    
    private String minusWordsStatic;
    private String phrasesStatic;
    public ArrayList<String> urlsForCurProj=new ArrayList();
    public ArrayList<Integer> fromPage=new ArrayList();
    public ArrayList<Integer> toPage=new ArrayList();
    public String curProjPath="";    
    public ArrayList<Ads> arrAds;
    private ArrayList<String> arrOfVisitedAds=new ArrayList();
    public ArrayList<ArrayList<Ads>> arrOfArrAds=new ArrayList(); //массив массивов объявлений
    private ArrayList<ArrayList<String>> arrOfArrVisitedAds=new ArrayList();
    ArrayList<Ads> adsForShow;
    public JPanel pageRibbon = new JPanel();        
    int numOfPage=0;
    int currPageAdsForShow=0;
    public ArrayList<String> paths;
    public Thread th;    
    public boolean isPaused=false;
    public boolean isFinished=true;
    public boolean isResized=false;
    public boolean isLoaded=false;
    public static Settings settings;
    public String openedFileForRequest="";
    public boolean isFilesChanged=false;
    public boolean permissionTojComboBox1ItemStateChange=false; 
    public int doubleEnter=0;
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {                
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptFilter;
    private javax.swing.JButton btnCanselFilter;
    private javax.swing.JButton btnCityMinus;
    private javax.swing.JButton btnCityPlus;
    private javax.swing.JButton btnCompanyMinus;
    private javax.swing.JButton btnCompanyPlus;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnPhrases;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSettings;
    private javax.swing.JButton btnStart;
    private javax.swing.JButton btnStop;
    private javax.swing.JButton btnWords;
    private javax.swing.JCheckBox checkCityMinus;
    private javax.swing.JCheckBox checkCityPlus;
    private javax.swing.JCheckBox checkCompanyMinus;
    private javax.swing.JCheckBox checkCompanyPlus;
    private javax.swing.JComboBox jComboBox1;
    public static javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public static javax.swing.JPanel jPanel1;
    public static javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox jSorting;
    private javax.swing.JLabel statusStr;
    private javax.swing.JTextPane txtRequest;
    // End of variables declaration//GEN-END:variables
}
class Ads implements Serializable {    
    public String adsUrl;
    public String name;
    public String prise;
    public String what;
    public String city;
    public int date;
    public String descript;
    public String imgMiddle;
    public String imgBig;
    public String[] arrImgSmall;
    public ArrayList<String> years;
    public boolean writeLetterIsAvailable;
    public Ads(String adsUrl, String name, String prise, String what, String city, int date, String descript,
                                ArrayList<String> years, boolean writeLetterIsAvailable, String imgMiddle, String imgBig, String[] arrImgSmall){
        this.adsUrl=adsUrl;
        this.name=name;
        this.prise=prise;
        this.what=what;
        this.city=city;
        this.date=date;
        this.descript=descript;
        this.years=years;
        this.writeLetterIsAvailable=writeLetterIsAvailable;
        this.imgMiddle=imgMiddle;
        this.imgBig=imgBig;
        this.arrImgSmall=arrImgSmall;        
    }    
}
class Settings{
    Properties props = new Properties();
    String lastPathToProjs;
    Color frameBackColor;
    Color jPanel1BackColor;
    Color txtDescriptBackColor;
    Color txtNameFontColor;
    Color txtYearFontColor;
    Color txtPriseFontColor;
    Color txtWhatFontColor;
    Color txtCityFontColor;
    Color txtDateFontColor;
    Font nameFont=null;
    Font priseFont=null;
    Font cityFont=null;
    Font whatFont=null;
    Font dateFont=null;
    Font yearFont=null;
    Font descriptFont=null;
    int adsMarginLeft;
    int adsMarginRight;
    int distBtvAds;
    int marginTextFromPict;
    int distBtvAdsItems;
    String yearsSorterMetod;    
    boolean showOnlyIfWriteLetterIsAvailable;
    int delayFrom;
    int delayTo;
    int delayDescriptShow;
    int delayImgShow;
    int scrollStep;
    int adsNumOnPage;
    public Settings() throws FileNotFoundException, IOException{        
        props.load(new FileInputStream(new File("src/settings/settings.ini")));        
        lastPathToProjs = props.getProperty("lastPathToProjs", "C:\\");   
        adsMarginLeft=Integer.parseInt(props.getProperty("adsMarginLeft", "20"));
        adsMarginRight=Integer.parseInt(props.getProperty("adsMarginRight", "20"));
        distBtvAds=Integer.parseInt(props.getProperty("distBtvAds", "20"));
        marginTextFromPict=Integer.parseInt(props.getProperty("marginTextFromPict", "20"));
        distBtvAdsItems=Integer.parseInt(props.getProperty("distBtvAdsItems", "5"));
        delayFrom=Integer.parseInt(props.getProperty("delayFrom", "2"));
        delayTo=Integer.parseInt(props.getProperty("delayTo", "5"));
        delayDescriptShow=Integer.parseInt(props.getProperty("delayDescriptShow", "800"));
        delayImgShow=Integer.parseInt(props.getProperty("delayImgShow", "800"));
        scrollStep=Integer.parseInt(props.getProperty("scrollStep", "16"));
        MainJFrame.jScrollPane2.getVerticalScrollBar().setUnitIncrement(scrollStep);        
        adsNumOnPage=Integer.parseInt(props.getProperty("adsNumOnPage", "20"));
        yearsSorterMetod=props.getProperty("yearsSorterMetod", "По убыванию");        
        if(yearsSorterMetod.equals("ascending")){
            yearsSorterMetod="По возрастанию";
        }else{
            yearsSorterMetod="По убыванию";
        } 
        if(props.getProperty("showOnlyIfWriteLetterIsAvailable", "true").equals("true")){
            showOnlyIfWriteLetterIsAvailable=true;
        }else{
            showOnlyIfWriteLetterIsAvailable=false;
        }
        System.out.println(lastPathToProjs);
        //загружаю цвет фона frame2
        ObjectInputStream oin;
        FileInputStream fis;
        try {
            fis = new FileInputStream("src/settings/frameBackColor.out");            
            oin = new ObjectInputStream(fis);                        
            frameBackColor=(Color)oin.readObject();  
            frame2.getContentPane().setBackground(frameBackColor);
            fis.close();
            
            fis = new FileInputStream("src/settings/jPanel1BackColor.out");            
            oin = new ObjectInputStream(fis);                        
            jPanel1BackColor=(Color)oin.readObject();  
            MainJFrame.jPanel1.setBackground(jPanel1BackColor);
            fis.close();
            
            fis = new FileInputStream("src/settings/txtDescriptBackColor.out");            
            oin = new ObjectInputStream(fis);                        
            txtDescriptBackColor=(Color)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/txtNameFontColor.out");            
            oin = new ObjectInputStream(fis);                        
            txtNameFontColor=(Color)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/txtYearFontColor.out");            
            oin = new ObjectInputStream(fis);                        
            txtYearFontColor=(Color)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/txtPriseFontColor.out");            
            oin = new ObjectInputStream(fis);                        
            txtPriseFontColor=(Color)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/txtWhatFontColor.out");            
            oin = new ObjectInputStream(fis);                        
            txtWhatFontColor=(Color)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/txtCityFontColor.out");            
            oin = new ObjectInputStream(fis);                        
            txtCityFontColor=(Color)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/txtDateFontColor.out");            
            oin = new ObjectInputStream(fis);                        
            txtDateFontColor=(Color)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/nameFont.out");            
            oin = new ObjectInputStream(fis);                        
            nameFont=(Font)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/priseFont.out");            
            oin = new ObjectInputStream(fis);                        
            priseFont=(Font)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/cityFont.out");            
            oin = new ObjectInputStream(fis);                        
            cityFont=(Font)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/whatFont.out");            
            oin = new ObjectInputStream(fis);                        
            whatFont=(Font)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/dateFont.out");            
            oin = new ObjectInputStream(fis);                        
            dateFont=(Font)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/yearFont.out");            
            oin = new ObjectInputStream(fis);                        
            yearFont=(Font)oin.readObject();              
            fis.close();
            
            fis = new FileInputStream("src/settings/descriptFont.out");            
            oin = new ObjectInputStream(fis);                        
            descriptFont=(Font)oin.readObject();              
            fis.close();
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    
    public void changeSettings(){
        //Сохраняю путь к файлу
        props.setProperty("lastPathToProjs", lastPathToProjs);        
        props.setProperty("adsMarginLeft", ""+adsMarginLeft); 
        props.setProperty("adsMarginRight", ""+adsMarginRight); 
        props.setProperty("distBtvAds", ""+distBtvAds); 
        props.setProperty("marginTextFromPict", ""+marginTextFromPict);         
        props.setProperty("distBtvAdsItems", ""+distBtvAdsItems); 
        props.setProperty("delayFrom", ""+delayFrom); 
        props.setProperty("delayTo", ""+delayTo); 
        props.setProperty("delayDescriptShow", ""+delayDescriptShow);         
        props.setProperty("delayImgShow", ""+delayImgShow);         
        props.setProperty("scrollStep", ""+scrollStep);         
        MainJFrame.jScrollPane2.getVerticalScrollBar().setUnitIncrement(scrollStep);
        props.setProperty("adsNumOnPage", ""+adsNumOnPage); 
        if(yearsSorterMetod.equals("По возрастанию")){
            props.setProperty("yearsSorterMetod", "ascending");
        }else{
            props.setProperty("yearsSorterMetod", "descending");
        }
        if(showOnlyIfWriteLetterIsAvailable){
            props.setProperty("showOnlyIfWriteLetterIsAvailable", "true");
        }else{
            props.setProperty("showOnlyIfWriteLetterIsAvailable", "false");
        }
        try {
            props.store(new FileOutputStream(new File("src/settings/settings.ini")),"");            
        } catch (IOException ex) {
            Logger.getLogger(Settings.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Сохраняю цвет фона frame2
        FileOutputStream fos;        
        ObjectOutputStream oos;
        try {
            fos = new FileOutputStream("src/settings/frameBackColor.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(frameBackColor);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/jPanel1BackColor.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(jPanel1BackColor);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/txtDescriptBackColor.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(txtDescriptBackColor);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/txtNameFontColor.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(txtNameFontColor);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/txtYearFontColor.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(txtYearFontColor);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/txtPriseFontColor.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(txtPriseFontColor);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/txtWhatFontColor.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(txtWhatFontColor);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/txtCityFontColor.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(txtCityFontColor);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/txtDateFontColor.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(txtDateFontColor);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/nameFont.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(nameFont);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/priseFont.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(priseFont);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/cityFont.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(cityFont);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/whatFont.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(whatFont);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/dateFont.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(dateFont);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/yearFont.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(yearFont);
            oos.flush();
            oos.close();
            
            fos = new FileOutputStream("src/settings/descriptFont.out");            
            oos = new ObjectOutputStream(fos);                             
            oos.writeObject(descriptFont);
            oos.flush();
            oos.close();
        } catch (IOException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
class MinusWordsFilter{
    String descript;
    char[]legalSymbols=new char[]{'1','2','3','4','5','6','7','8','9','0',
                                      '!','@','#','$','%','^','&','*','(',')',
                                      '-','_','+','=','|','\\','"','№',';','%',
                                      ':','?','.',',',' ',10};;
    String minusWords;
    public MinusWordsFilter(String descript, String minusWords, char[]legalSymbols){
        this.descript=descript;
        this.minusWords=minusWords;
        //this.legalSymbols=legalSymbols;        
    }
    public boolean test137(){
        //сокращаю колво пробелов до 1
        for(int i=0;i<minusWords.length()-1;i++){
            if(minusWords.charAt(i)==' '&&minusWords.charAt(i+1)==' '){                               
                minusWords=minusWords.substring(0, i)+minusWords.substring(i+1, minusWords.length());
                i--;
            }
        }    
        StringBuffer bMinusWords=new StringBuffer(minusWords);            
        for(int i=0;i<bMinusWords.length();i++){                                
            i=test136quot(i,bMinusWords);
            //System.out.println(i);
            //System.out.println(bMinusWords.length());
            if(i<bMinusWords.length()&&bMinusWords.charAt(i)=='-'){
                bMinusWords.deleteCharAt(i);
            }                                
        }
        ArrayList<String>arrStr=new ArrayList();
        arrStr=test137GetDescriptAtWords(new String(bMinusWords));
        for(int i=0;i<arrStr.size();i++){
            //System.out.println(arrStr.get(i));
            if(test137CheckWords(arrStr.get(i), descript, legalSymbols)) return true;
        }
        return false;
    }
    
    public ArrayList<String> test137GetDescriptAtWords(String descript){
        ArrayList<String> arrWordsFromDescript=new ArrayList();
        int startIndex=-1;                                 
        for(int i=0;i<descript.length();i++){             
            i=test136quot(i,new StringBuffer(descript));
            if(startIndex==-1&&(descript.charAt(i)==' '||i==0)){
                if(descript.charAt(i)==' '){
                    startIndex=i+1;
                    i++;
                }else{                                                                            
                    startIndex=i;
                }                                                                         
            }
            
            if(startIndex!=-1){                
                if(i<descript.length()&&descript.charAt(i)==' '){                    
                    arrWordsFromDescript.add(descript.substring(startIndex, i));
                    startIndex=i+1;
                }
                if(i+1>=descript.length()){
                    if(descript.charAt(descript.length()-1)=='"'){
                        arrWordsFromDescript.add(descript.substring(startIndex, i));
                    }else{
                        arrWordsFromDescript.add(descript.substring(startIndex, i+1));
                    }                    
                }                        
            }
        }        
        return arrWordsFromDescript;
    }
    public boolean test137CheckWords(String word, String descript,char[]legalSymbols){
        Object[] arrForReturn=new Object[2];        
        //ДЛЯ ВОСКЛИЦАТЕЛЬНЫХ ЗНАКОВ!
        if(word.charAt(0)=='!'&&word.charAt(1)!='"'){
            word=word.substring(1, word.length());
            //System.out.println("in ! words CheckWord metod");
            int startIndex=-1;
            if(descript.indexOf(word)!=-1){                
                ArrayList<String> arrWordsFromDescript=test136GetDescriptAtWords(descript);
                for(int i=0;i<arrWordsFromDescript.size();i++){
                    if((startIndex=arrWordsFromDescript.get(i).indexOf(word))!=-1){
                        if(arrWordsFromDescript.get(i).length()==word.length()){                                
                                return true;
                        }
                        if(startIndex==0){
                            for(int j=0;j<legalSymbols.length;j++){
                                if(arrWordsFromDescript.get(i).charAt(startIndex+word.length())==legalSymbols[j]){                                    
                                    return true;
                                }
                            }
                        }
                        if(startIndex!=0&&startIndex+word.length()==arrWordsFromDescript.get(i).length()){
                            for(int j=0;j<legalSymbols.length;j++){
                                if(arrWordsFromDescript.get(i).charAt(startIndex-1)==legalSymbols[j]){                                    
                                    return true;
                                }
                            }
                        }
                        if(startIndex!=0&&startIndex+word.length()<arrWordsFromDescript.get(i).length()){
                            boolean oneCheck=false;
                            for(int j=0;j<legalSymbols.length;j++){
                                if(arrWordsFromDescript.get(i).charAt(startIndex-1)==legalSymbols[j]){
                                    if(oneCheck){                                        
                                        return true;
                                    }else{
                                        oneCheck=true;
                                    }
                                }
                                if(arrWordsFromDescript.get(i).charAt(startIndex+word.length())==legalSymbols[j]){
                                    if(oneCheck){                                        
                                        return true;
                                    }else{
                                        oneCheck=true;
                                    }
                                }
                            }
                        }                        
                    }
                    //System.out.println(arrWordsFromDescript.get(i));
                }
            }            
            return false;
        }
        //ДЛЯ КАВЫЧЕК!!!!!
        if(word.charAt(0)=='"'||(word.charAt(0)=='!'&&word.charAt(1)=='"')){               
            //System.out.println("in \" \" words CheckWord metod");
            if(word.charAt(0)=='"'){
                word=word.substring(1, word.length());
                word=word.substring(0,word.length()-1);            
                int startIndex=-1;
                if((startIndex=descript.toUpperCase().indexOf(word.toUpperCase()))!=-1){                                          
                    if(startIndex==0){
                        for(int j=0;j<legalSymbols.length;j++){
   /*сука*/                 if(startIndex+word.length()==descript.length()||descript.charAt(startIndex+word.length())==legalSymbols[j]){                                
                                return true;
                            }
                        }
                    }
                    if(startIndex!=0&&startIndex+word.length()==descript.length()){
                        for(int j=0;j<legalSymbols.length;j++){
                            if(descript.charAt(startIndex-1)==legalSymbols[j]){                                
                                return true;
                            }
                        }
                    }
                    if(startIndex!=0&&startIndex+word.length()<descript.length()){                    
                        boolean oneCheck=false;
                        for(int j=0;j<legalSymbols.length;j++){
                            if(descript.charAt(startIndex-1)==legalSymbols[j]){
                                if(oneCheck){                                    
                                    return true;
                                }else{
                                    oneCheck=true;
                                }
                            }
                            if(descript.charAt(startIndex+word.length())==legalSymbols[j]){
                                if(oneCheck){                                    
                                    return true;
                                }else{
                                   oneCheck=true;
                                }
                            }
                        }
                    }                               
                }
                word="\""+word+"\"";                
            }
            if(word.charAt(0)=='!'){
                word=word.substring(1, word.length());
                word=word.substring(1, word.length());
                word=word.substring(0,word.length()-1);            
                int startIndex=-1;
                if((startIndex=descript.indexOf(word))!=-1){                                          
                    if(startIndex==0){
                        for(int j=0;j<legalSymbols.length;j++){
                            if(startIndex+word.length()==descript.length()||descript.charAt(startIndex+word.length())==legalSymbols[j]){                                
                                return true;
                            }
                        }
                    }
                    if(startIndex!=0&&startIndex+word.length()==descript.length()){
                        for(int j=0;j<legalSymbols.length;j++){
                            if(descript.charAt(startIndex-1)==legalSymbols[j]){                                
                                return true;
                            }
                        }
                    }
                    if(startIndex!=0&&startIndex+word.length()<descript.length()){                    
                        boolean oneCheck=false;
                        for(int j=0;j<legalSymbols.length;j++){
                            if(descript.charAt(startIndex-1)==legalSymbols[j]){
                                if(oneCheck){                                    
                                    return true;
                                }else{
                                    oneCheck=true;
                                }
                            }
                            if(descript.charAt(startIndex+word.length())==legalSymbols[j]){
                                if(oneCheck){     
                                    return true;
                                }else{
                                   oneCheck=true;
                                }
                            }
                        }
                    }                               
                }
            }            
            return false;
        }
        // ДЛЯ ОБЧНЫХ СЛОВ!!!!
        if(word.charAt(0)!='"'&&word.charAt(0)!='!'){            
            //System.out.println("in simple words CheckWord metod");
            int startIndex=-1;
            if(descript.toUpperCase().indexOf(word.toUpperCase())!=-1){                    
                return true;
                /*ArrayList<String> arrWordsFromDescript=test136GetDescriptAtWords(descript.toUpperCase());
                for(int i=0;i<arrWordsFromDescript.size();i++){
                    if((startIndex=arrWordsFromDescript.get(i).indexOf(word.toUpperCase()))!=-1){
                        if(arrWordsFromDescript.get(i).length()==word.length()){
                                arrForReturn[0]=true;
                                arrForReturn[1]=word;
                                return arrForReturn;
                                //return true;
                        }
                        if(startIndex==0){
                            for(int j=0;j<legalSymbols.length;j++){
                                if(arrWordsFromDescript.get(i).charAt(startIndex+word.length())==legalSymbols[j]){
                                    arrForReturn[0]=true;
                                    arrForReturn[1]=word;
                                    return arrForReturn;
                                    //return true;
                                }
                            }
                        }
                        if(startIndex!=0&&startIndex+word.length()==arrWordsFromDescript.get(i).length()){
                            for(int j=0;j<legalSymbols.length;j++){
                                if(arrWordsFromDescript.get(i).charAt(startIndex-1)==legalSymbols[j]){
                                    arrForReturn[0]=true;
                                    arrForReturn[1]=word;
                                    return arrForReturn;
                                    //return true;
                                }
                            }
                        }
                        if(startIndex!=0&&startIndex+word.length()<arrWordsFromDescript.get(i).length()){
                            boolean oneCheck=false;
                            for(int j=0;j<legalSymbols.length;j++){
                                if(arrWordsFromDescript.get(i).charAt(startIndex-1)==legalSymbols[j]){
                                    if(oneCheck){
                                        arrForReturn[0]=true;
                                        arrForReturn[1]=word;
                                        return arrForReturn;
                                        //return true;
                                    }else{
                                        oneCheck=true;
                                    }
                                }
                                if(arrWordsFromDescript.get(i).charAt(startIndex+word.length())==legalSymbols[j]){
                                    if(oneCheck){
                                        arrForReturn[0]=true;
                                        arrForReturn[1]=word;
                                        return arrForReturn;
                                        //return true;
                                    }else{
                                        oneCheck=true;
                                    }
                                }
                            }
                        }                        
                    }
                    //System.out.println(arrWordsFromDescript.get(i));
                }*/
            }            
            return false;
        }
        return false;
    }
    public int test136quot(int i, StringBuffer bModifStr){
        int quotCount=0;
        if(i>0&&bModifStr.charAt(i-1)=='"'){
                quotCount++;
                while(quotCount>0){
                    i++;
                    if(bModifStr.charAt(i-1)=='"') quotCount--;
                }
        }
        return i;
    }
    public ArrayList<String> test136GetDescriptAtWords(String descript){
        ArrayList<String> arrWordsFromDescript=new ArrayList();
        int startIndex=-1;
        //заменяю все \n на пробелы
        descript=descript.replaceAll("\n", " ").trim();
        //сокращаю колво пробелов до 1
        for(int i=0;i<descript.length()-1;i++){
            if(descript.charAt(i)==' '&&descript.charAt(i+1)==' '){                               
                descript=descript.substring(0, i)+descript.substring(i+1, descript.length());
                i--;
            }
        }                                 
        for(int i=0;i<descript.length();i++){    
            if(startIndex==-1&&(descript.charAt(i)==' '||i==0)){
                if(descript.charAt(i)==' '){
                    startIndex=i+1;
                    i++;
                }else{                                                                            
                    startIndex=i;
                }                                                                         
            }
            if(startIndex!=-1){
                if(descript.charAt(i)==' '){
                    arrWordsFromDescript.add(descript.substring(startIndex, i));
                    startIndex=i+1;
                }
                if(i+1>=descript.length()){
                    arrWordsFromDescript.add(descript.substring(startIndex, i+1));
                }                        
            }
        }        
        return arrWordsFromDescript;
    }
}
class PlusPhrasesFilter{
    String descript;
    char[]legalSymbols=new char[]{'1','2','3','4','5','6','7','8','9','0',
                                      '!','@','#','$','%','^','&','*','(',')',
                                      '-','_','+','=','|','\\','"','№',';','%',
                                      ':','?','.',',',' ',10};;
    String origStr;
    public PlusPhrasesFilter(String descript, String origStr, char[]legalSymbols){
        this.descript=descript;
        this.origStr=origStr;
        //this.legalSymbols=legalSymbols;
        
    }
    public boolean test136(){
        origStr="("+origStr+")";
        //System.out.println(origStr);        
        StringBuffer bModifStr=new StringBuffer(origStr);        
        String sModifStr;
        //0
        int bktCount=0;
        int startIndex=-1;
        int endIndex=0;
        int quotCount=0;
        //для !
        for(int i=0;i<bModifStr.length()-1;i++){            
            if(bModifStr.charAt(i)=='!'&&bModifStr.charAt(i+1)=='('){
                for(int j=i+1;j<bModifStr.length()-1;j++){
                    if(bModifStr.charAt(j)=='('){
                        bModifStr.deleteCharAt(j);                        
                        bktCount++;
                    }
                    if(bModifStr.charAt(j)==' '){
                        bModifStr.insert(j+1,'!');
                    }
                    if(bModifStr.charAt(j)==')'){
                        bktCount--;
                        if(bktCount==0){
                            bModifStr.deleteCharAt(j);
                            break;
                        }
                    } 
                    j=test136quot(j,bModifStr);
                }
            }
            i=test136quot(i,bModifStr);
        }        
        bModifStr=test136arrList(bModifStr);
        //System.out.println("That1: "+bModifStr);
        //System.out.println("That2: "+bModifStr);       
        sModifStr=new String (bModifStr);
        bModifStr=new StringBuffer(sModifStr.trim());
        /*Нахожу пробелы в строке и запоминаю их положение, а также запоминаю положение /n. Потом вырезаю
          все /n чтобы в самом конце вставить их        
        */
        ArrayList<String> slashNum=new ArrayList();
        for(int i=0;i<bModifStr.length();i++){
            if(bModifStr.charAt(i)==' '&&bModifStr.charAt(i+1)!='/')slashNum.add(" ");
            if(bModifStr.charAt(i)=='/'){
                slashNum.add(""+bModifStr.charAt(i)+bModifStr.charAt(i+1));
                //System.out.println(""+bModifStr.charAt(i)+bModifStr.charAt(i+1));
                bModifStr.delete(i, i+3);                
                ////i+=3;
            }
        }
        //System.out.println("That2: "+bModifStr);
        /*Прохожу по строке. 
          Если найдено слово, то запоминаю индекс первой буквы и иду дальше. Когда встречаю
               пробел, то в переменную spaceExist=1 и иду дальше... когда встречаю | то 
               если spaceExist>0 в индекс первой буквы я записываю "(" и перед "|" записываю ")" 
               и spaceExist=0 и в индекс первой буквы записываю индекс "|" и иду дальше...
               А если бы я встретил "|" и spaceExist==0 и startIndex!=0, то я бы в startIndex записал
               "(" и перед "|" я бы записал ")".
               Если я встречаю ")" или "|" или конец строки, то в индекс перед этим я записываю ")"
        */        
        int spaceExist=0;   
        for(int i=0;i<bModifStr.length();i++){
            i=test136quot(i,bModifStr);
            if(bModifStr.charAt(i)!='('&&bModifStr.charAt(i)!=')'&&
               bModifStr.charAt(i)!='|'&&bModifStr.charAt(i)!=' '){
               if(startIndex==-1)startIndex=i;
            }
            if(bModifStr.charAt(i)=='('){
               startIndex=-1;
            }
            if((bModifStr.charAt(i)=='|'/*||bModifStr.charAt(i)=='('*/)&&startIndex!=-1){
                bModifStr.insert(startIndex, '(');
                i++;
                bModifStr.insert(i, ')');
                i+=2;//чтобы каретка указывала на следующий символ после "|"
                startIndex=-1;
            }                   
            if(i>0&&bModifStr.charAt(i-1)=='|'){
                startIndex=i;
            }            
            if((bModifStr.charAt(i)=='|'||bModifStr.charAt(i)==')')&&startIndex!=-1){
                bModifStr.insert(startIndex, '(');
                i++;                
                bModifStr.insert(i, ')');
                i++;  
                startIndex=-1;
            }                
        }
        //System.out.println("That3: "+bModifStr);
        /*может возникнуть ситуация, что выражение (слово1 слово2 слово3|слово1 слово2 слово3)
          запишут как ((слово1 слово2 слово3)|(слово1 слово2 слово3)), тогда в строке из-за бага появятся 
          такие штуки: "()" и я их удаляю.
        */
        CharSequence oldChSeq="()";
        CharSequence newChSeq="";
        sModifStr=new String(bModifStr);
        sModifStr=sModifStr.replace(oldChSeq,newChSeq);
        bModifStr=new StringBuffer(sModifStr);
        /* заключаю отдельные слова в скобки */
        bktCount=0;
        startIndex=-1;
        for(int i=0;i<bModifStr.length();i++){
            if(bModifStr.charAt(i)!='('&&bModifStr.charAt(i)!=')'&&
               bModifStr.charAt(i)!='|'&&bModifStr.charAt(i)!=' '&&startIndex==-1){
                startIndex=i;
                bModifStr.insert(i, '(');
                i++;
                bktCount++;
            }
            i=test136quot(i,bModifStr);
            if((bModifStr.charAt(i)==' ' || bModifStr.charAt(i)==')') && bktCount>0){               
                bModifStr.insert(i, ')');
                i++;
                bktCount=0;
                startIndex=-1;
            }            
        }
        
        //теперь надо вставить все /n в их позиции.
        int spaceCount=0;
        for(int i=0;i<bModifStr.length();i++){
            if(bModifStr.charAt(i)==' '){                
                bModifStr.replace(i, i+1, slashNum.get(spaceCount));
                i+=slashNum.get(spaceCount).length();
                //bModifStr.re
                spaceCount++;
            }            
        }
        //теперь заменяю все пробелы на +.
        for(int i=0;i<bModifStr.length();i++){
            i=test136quot(i,bModifStr);
            if(bModifStr.charAt(i)==' '){                
                bModifStr.replace(i,i+1, "+");                                
            }            
        }
        //System.out.println("That4: "+bModifStr);                  
        return (boolean)test136Recursion(new String(bModifStr),descript,legalSymbols)[0];
    }
        
    public Object[] test136Recursion(String essence, String descript, char[] legalSymbols){
        //String str="слово1 слово2";
        Object[] arrForReturn=new Object[2];
        int leftBktCount=0;  // (
        int rightBktCount=0; // )        
        int bktCount=0;
        int startIndex=-1;        
        ArrayList<Essence> sameLevelEssences=new ArrayList();
        //System.out.println("1");
        for(int i=0;i<essence.length();i++){
            if(essence.charAt(i)=='('||essence.charAt(i)==')')bktCount++;
        }
        if(bktCount!=0){
            bktCount=0;            
            for(int i=0;i<essence.length();i++){
                if(bktCount==0&&(essence.charAt(i)=='+'||essence.charAt(i)=='|')){
                    sameLevelEssences.add(new Essence(essence.substring(i, i+1)));
                    if(i+1<essence.length())i++;
                }  
                if(bktCount==0&&essence.charAt(i)=='/'){
                    sameLevelEssences.add(new Essence(essence.substring(i, i+2)));
                    if(i+2<essence.length())i+=2;
                }
                if(essence.charAt(i)=='(') {
                    if(startIndex==-1){
                        startIndex=i;
                    }                
                    bktCount++;
                }
                if(essence.charAt(i)==')') bktCount--;
                if(bktCount==0&&startIndex!=-1){
                    /*if(essence.charAt(i+1)=='+'||essence.charAt(i+1)=='|'||essence.charAt(i+1)=='/'||i+1==essence.length()){                    
                        sameLevelEssences.add(essence.substring(startIndex, i));
                    }*/
                    sameLevelEssences.add(new Essence(essence.substring(startIndex+1, i)));
                    startIndex=-1;
                }
            }
            //действия для сущностей
            for(int i=0;i<sameLevelEssences.size();i++){
                //System.out.print("сущ"+(i+1)+": "+sameLevelEssences.get(i).essence+" ");  
                Object[] temp=test136Recursion(sameLevelEssences.get(i).essence,descript,legalSymbols);
                sameLevelEssences.get(i).t_f=(boolean)temp[0];
                sameLevelEssences.get(i).words.addAll((ArrayList) temp[1]);
                i++;
            }
            
            //действия для знаков
            if(sameLevelEssences.size()>1){
                for(int i=1;i<sameLevelEssences.size();i++){
                    if (sameLevelEssences.get(i).essence.equals("+")){                        
                            if(sameLevelEssences.get(i-1).t_f&&sameLevelEssences.get(i+1).t_f){
                                sameLevelEssences.get(i).words.addAll(sameLevelEssences.get(i+1).words);//new
                                /*for(int j=0;j<sameLevelEssences.get(i).words.size();j++)
                                    System.out.println(sameLevelEssences.get(i).words.get(j));*/
                                sameLevelEssences.get(i).words.addAll(sameLevelEssences.get(i-1).words);//new
                                sameLevelEssences.get(i).t_f=true;                                
                            }else{
                                sameLevelEssences.get(i).t_f=false;
                            }
                    }
                    if (sameLevelEssences.get(i).essence.equals("|")){                        
                            if(sameLevelEssences.get(i-1).t_f||sameLevelEssences.get(i+1).t_f){
                                if(sameLevelEssences.get(i-1).t_f)sameLevelEssences.get(i).words.addAll(sameLevelEssences.get(i-1).words);//new
                                if(sameLevelEssences.get(i+1).t_f)sameLevelEssences.get(i).words.addAll(sameLevelEssences.get(i+1).words);//new
                                sameLevelEssences.get(i).t_f=true;                                
                            }else{
                                sameLevelEssences.get(i).t_f=false;
                            }                            
                    }
                    //to do...
                    if (sameLevelEssences.get(i).essence.charAt(0)=='/'){                                                    
                        if(sameLevelEssences.get(i-1).t_f&&sameLevelEssences.get(i+1).t_f){
                            //заменяю все \n на пробелы
                            String tempDescript=descript;
                            tempDescript=tempDescript.replaceAll("\n", " ").trim();
                            //сокращаю колво пробелов до 1
                            for(int j=0;j<tempDescript.length()-1;j++){
                                if(tempDescript.charAt(j)==' '&&tempDescript.charAt(j+1)==' '){                               
                                    tempDescript=tempDescript.substring(0, j)+tempDescript.substring(j+1, tempDescript.length());
                                    j--;
                                }
                            } 
                            for(int j=0;j<sameLevelEssences.get(i-1).words.size();j++){
                                String firstWord=sameLevelEssences.get(i-1).words.get(j);
                                for(int k=0;k<sameLevelEssences.get(i+1).words.size();k++){
                                    String secondWord=sameLevelEssences.get(i+1).words.get(k); 
                                    //System.out.println("tempDescript "+tempDescript);
                                    //System.out.println("firstWord "+firstWord);
                                    //System.out.println("secondWord "+secondWord);
                                    int startIndex1;
                                    int startIndex2;
                                    int spaceCount=0;
                                    String distBtvWord1Word2;
                                    //ищу в подстроке первое слово и запоминаю его старт индекс                                    
                                    startIndex1=tempDescript.indexOf(firstWord);
                                    //ищу в подстроке второе слово и запоминаю его старт индекс                                    
                                    startIndex2=tempDescript.indexOf(secondWord);
                                    if(startIndex1!=-1&&startIndex2!=-1){      
                                        if(startIndex1+firstWord.length()<startIndex2){
                                            distBtvWord1Word2=tempDescript.substring(startIndex1+firstWord.length(), startIndex2);
                                        }else{
                                            distBtvWord1Word2=tempDescript.substring(startIndex2+secondWord.length(), startIndex1);
                                        }
                                        //System.out.println(distBtvWord1Word2); 
                                        for(int q=0;q<distBtvWord1Word2.length();q++){
                                            if(distBtvWord1Word2.charAt(q)==' '){
                                                spaceCount++;
                                            }
                                        }
                                        if(spaceCount!=0){
                                            //System.out.println("spaceCount "+spaceCount);
                                            if(spaceCount-1<=Character.getNumericValue(sameLevelEssences.get(i).essence.charAt(1))){
                                                //System.out.println("Will true");
                                                /*ArrayList<String> temp=new ArrayList();
                                                temp.add(firstWord);
                                                temp.add(secondWord);
                                                //spaceCount=0;                                                
                                                arrForReturn[0]=true;
                                                arrForReturn[1]=temp;
                                                return arrForReturn;*/
                                                sameLevelEssences.get(i).t_f=true;
                                            }else{
                                                //System.out.println("Will false");
                                                /*arrForReturn[0]=false;
                                                arrForReturn[1]=sameLevelEssences.get(i).words;
                                                return arrForReturn;*/
                                                sameLevelEssences.get(i).t_f=false;
                                            }
                                        }
                                    }else{
                                        break;
                                    }
                                }                                    
                            }
                        }else{
                            //System.out.println("NO!!! false");
                            /*
                            arrForReturn[0]=false;
                            arrForReturn[1]=sameLevelEssences.get(i).words;
                            return arrForReturn;*/
                            sameLevelEssences.get(i).t_f=false;
                        }
                    }                    
                    i++;                    
                }   
                //если был знак + или / то
                if(sameLevelEssences.get(1).essence.equals("+")||sameLevelEssences.get(1).essence.charAt(0)=='/'){                    
                    for(int i=1;i<sameLevelEssences.size();i++){
                        if(!sameLevelEssences.get(i).t_f) {
                            arrForReturn[0]=false;
                            arrForReturn[1]=sameLevelEssences.get(i).words;
                            return arrForReturn;
                            //return false;
                        } //если хоть 1 знак из + выдал false то false
                        i++;
                    }
                    arrForReturn[0]=true;
                    arrForReturn[1]=sameLevelEssences.get(1).words;
                    return arrForReturn;
                    //return true;
                }
                //если был знак | то
                if(sameLevelEssences.get(1).essence.equals("|")){
                    boolean check=false;
                    ArrayList<String> temp=new ArrayList();
                    for(int i=1;i<sameLevelEssences.size();i++){
                        if(sameLevelEssences.get(i).t_f){
                            check=true;
                            temp.addAll(sameLevelEssences.get(i).words);
                            //return true
                        } //если хоть 1 знак из + выдал false то false
                        i++;
                    }
                    if(check){
                        arrForReturn[0]=true;
                        arrForReturn[1]=temp;
                        return arrForReturn;
                    }else{
                        arrForReturn[0]=false;
                        arrForReturn[1]=sameLevelEssences.get(1).words;
                        return arrForReturn;
                    }                    
                    //return false;
                }
            }else{
                arrForReturn[0]=sameLevelEssences.get(0).t_f;;
                //arrForReturn[1]=sameLevelEssences.get(0).word;
                arrForReturn[1]=sameLevelEssences.get(0).words;
                return arrForReturn;
                //return sameLevelEssences.get(0).t_f;
            }
            
        }else{ //тут действие уже будет для голого слова
            Object[] temp=test136CheckWord(essence,descript,legalSymbols);
            ArrayList<String> temp2=new ArrayList();
            if((boolean)temp[0]){
                arrForReturn[0]=true; 
                //System.out.println(temp[1]);
                temp2.add((String)temp[1]);
                arrForReturn[1]=temp2;
                return arrForReturn;
                //return true;
            }
            else {
                arrForReturn[0]=false;                
                temp2.add((String)temp[1]);
                arrForReturn[1]=temp2;
                //System.out.println("else"+temp[1]);
                return arrForReturn;
                //return false;
            }
        }        
        arrForReturn[0]=false;                
        arrForReturn[1]="";
        return arrForReturn;
        //return false;
    }  
    
    public Object[] test136CheckWord(String word, String descript,char[]legalSymbols){
        Object[] arrForReturn=new Object[2];        
        //ДЛЯ ВОСКЛИЦАТЕЛЬНЫХ ЗНАКОВ!
        if(word.charAt(0)=='!'&&word.charAt(1)!='"'){
            word=word.substring(1, word.length());
            //System.out.println("in ! words CheckWord metod");
            int startIndex=-1;
            if(descript.indexOf(word)!=-1){                
                ArrayList<String> arrWordsFromDescript=test136GetDescriptAtWords(descript);
                for(int i=0;i<arrWordsFromDescript.size();i++){
                    if((startIndex=arrWordsFromDescript.get(i).indexOf(word))!=-1){
                        if(arrWordsFromDescript.get(i).length()==word.length()){
                                arrForReturn[0]=true;
                                arrForReturn[1]=word;
                                return arrForReturn;
                                //return true;
                        }
                        if(startIndex==0){
                            for(int j=0;j<legalSymbols.length;j++){
                                if(arrWordsFromDescript.get(i).charAt(startIndex+word.length())==legalSymbols[j]){
                                    arrForReturn[0]=true;
                                    arrForReturn[1]=word;
                                    return arrForReturn;
                                }
                            }
                        }
                        if(startIndex!=0&&startIndex+word.length()==arrWordsFromDescript.get(i).length()){
                            for(int j=0;j<legalSymbols.length;j++){
                                if(arrWordsFromDescript.get(i).charAt(startIndex-1)==legalSymbols[j]){
                                    arrForReturn[0]=true;
                                    arrForReturn[1]=word;
                                    return arrForReturn;
                                }
                            }
                        }
                        if(startIndex!=0&&startIndex+word.length()<arrWordsFromDescript.get(i).length()){
                            boolean oneCheck=false;
                            for(int j=0;j<legalSymbols.length;j++){
                                if(arrWordsFromDescript.get(i).charAt(startIndex-1)==legalSymbols[j]){
                                    if(oneCheck){
                                        arrForReturn[0]=true;
                                        arrForReturn[1]=word;
                                        return arrForReturn;
                                    }else{
                                        oneCheck=true;
                                    }
                                }
                                if(arrWordsFromDescript.get(i).charAt(startIndex+word.length())==legalSymbols[j]){
                                    if(oneCheck){
                                        arrForReturn[0]=true;
                                        arrForReturn[1]=word;
                                        return arrForReturn;
                                    }else{
                                        oneCheck=true;
                                    }
                                }
                            }
                        }                        
                    }
                    //System.out.println(arrWordsFromDescript.get(i));
                }
            }
            arrForReturn[0]=false;
            arrForReturn[1]="";
            return arrForReturn;
        }
        //ДЛЯ КАВЫЧЕК!!!!!
        if(word.charAt(0)=='"'||(word.charAt(0)=='!'&&word.charAt(1)=='"')){               
            //System.out.println("in \" \" words CheckWord metod");
            if(word.charAt(0)=='"'){
                word=word.substring(1, word.length());
                word=word.substring(0,word.length()-1);            
                int startIndex=-1;
                if((startIndex=descript.toUpperCase().indexOf(word.toUpperCase()))!=-1){                                          
                    if(startIndex==0){
                        for(int j=0;j<legalSymbols.length;j++){
      /*сука*/              if(startIndex+word.length()==descript.length()||descript.charAt(startIndex+word.length())==legalSymbols[j]){
                                arrForReturn[0]=true;
                                arrForReturn[1]=word;
                                return arrForReturn;
                            }
                        }
                    }
                    if(startIndex!=0&&startIndex+word.length()==descript.length()){
                        for(int j=0;j<legalSymbols.length;j++){
                            if(descript.charAt(startIndex-1)==legalSymbols[j]){
                                arrForReturn[0]=true;
                                arrForReturn[1]=word;
                                return arrForReturn;
                                //return true;
                            }
                        }
                    }
                    if(startIndex!=0&&startIndex+word.length()<descript.length()){                    
                        boolean oneCheck=false;
                        for(int j=0;j<legalSymbols.length;j++){
                            if(descript.charAt(startIndex-1)==legalSymbols[j]){
                                if(oneCheck){
                                    arrForReturn[0]=true;
                                    arrForReturn[1]=word;
                                    return arrForReturn;
                                    //return true;
                                }else{
                                    oneCheck=true;
                                }
                            }
                            if(descript.charAt(startIndex+word.length())==legalSymbols[j]){
                                if(oneCheck){
                                    arrForReturn[0]=true;
                                    arrForReturn[1]=word;
                                    return arrForReturn;
                                    //return true;
                                }else{
                                   oneCheck=true;
                                }
                            }
                        }
                    }                               
                }
                word="\""+word+"\""; 
            }
            if(word.charAt(0)=='!'){
                word=word.substring(1, word.length());
                word=word.substring(1, word.length());
                word=word.substring(0,word.length()-1);            
                int startIndex=-1;
                if((startIndex=descript.indexOf(word))!=-1){                                          
                    if(startIndex==0){
                        for(int j=0;j<legalSymbols.length;j++){
       /*сука*/             if(startIndex+word.length()==descript.length()||descript.charAt(startIndex+word.length())==legalSymbols[j]){
                                arrForReturn[0]=true;
                                arrForReturn[1]=word;
                                return arrForReturn;
                                //return true;
                            }
                        }
                    }
                    if(startIndex!=0&&startIndex+word.length()==descript.length()){
                        for(int j=0;j<legalSymbols.length;j++){
                            if(descript.charAt(startIndex-1)==legalSymbols[j]){
                                arrForReturn[0]=true;
                                arrForReturn[1]=word;
                                return arrForReturn;
                                //return true;
                            }
                        }
                    }
                    if(startIndex!=0&&startIndex+word.length()<descript.length()){                    
                        boolean oneCheck=false;
                        for(int j=0;j<legalSymbols.length;j++){
                            if(descript.charAt(startIndex-1)==legalSymbols[j]){
                                if(oneCheck){
                                    arrForReturn[0]=true;
                                    arrForReturn[1]=word;
                                    return arrForReturn;
                                    //return true;
                                }else{
                                    oneCheck=true;
                                }
                            }
                            if(descript.charAt(startIndex+word.length())==legalSymbols[j]){
                                if(oneCheck){
                                    arrForReturn[0]=true;
                                    arrForReturn[1]=word;
                                    return arrForReturn;
                                    //return true;
                                }else{
                                   oneCheck=true;
                                }
                            }
                        }
                    }                               
                }
            }
            arrForReturn[0]=false;
            arrForReturn[1]="";
            return arrForReturn;
            //return false;
        }
        // ДЛЯ ОБЧНЫХ СЛОВ!!!!
        if(word.charAt(0)!='"'&&word.charAt(0)!='!'){            
            //System.out.println("in simple words CheckWord metod");
            int startIndex=-1;
            if(descript.toUpperCase().indexOf(word.toUpperCase())!=-1){   
                arrForReturn[0]=true;
                arrForReturn[1]=word;
                return arrForReturn;
                /*ArrayList<String> arrWordsFromDescript=test136GetDescriptAtWords(descript.toUpperCase());
                for(int i=0;i<arrWordsFromDescript.size();i++){
                    if((startIndex=arrWordsFromDescript.get(i).indexOf(word.toUpperCase()))!=-1){
                        if(arrWordsFromDescript.get(i).length()==word.length()){
                                arrForReturn[0]=true;
                                arrForReturn[1]=word;
                                return arrForReturn;
                                //return true;
                        }
                        if(startIndex==0){
                            for(int j=0;j<legalSymbols.length;j++){
                                if(arrWordsFromDescript.get(i).charAt(startIndex+word.length())==legalSymbols[j]){
                                    arrForReturn[0]=true;
                                    arrForReturn[1]=word;
                                    return arrForReturn;
                                    //return true;
                                }
                            }
                        }
                        if(startIndex!=0&&startIndex+word.length()==arrWordsFromDescript.get(i).length()){
                            for(int j=0;j<legalSymbols.length;j++){
                                if(arrWordsFromDescript.get(i).charAt(startIndex-1)==legalSymbols[j]){
                                    arrForReturn[0]=true;
                                    arrForReturn[1]=word;
                                    return arrForReturn;
                                    //return true;
                                }
                            }
                        }
                        if(startIndex!=0&&startIndex+word.length()<arrWordsFromDescript.get(i).length()){
                            boolean oneCheck=false;
                            for(int j=0;j<legalSymbols.length;j++){
                                if(arrWordsFromDescript.get(i).charAt(startIndex-1)==legalSymbols[j]){
                                    if(oneCheck){
                                        arrForReturn[0]=true;
                                        arrForReturn[1]=word;
                                        return arrForReturn;
                                        //return true;
                                    }else{
                                        oneCheck=true;
                                    }
                                }
                                if(arrWordsFromDescript.get(i).charAt(startIndex+word.length())==legalSymbols[j]){
                                    if(oneCheck){
                                        arrForReturn[0]=true;
                                        arrForReturn[1]=word;
                                        return arrForReturn;
                                        //return true;
                                    }else{
                                        oneCheck=true;
                                    }
                                }
                            }
                        }                        
                    }
                    //System.out.println(arrWordsFromDescript.get(i));
                }*/
            }
            arrForReturn[0]=false;
            arrForReturn[1]="";
            return arrForReturn;
            //return false;
        }
        arrForReturn[0]=false;
        arrForReturn[1]="";
        return arrForReturn;
        //return false;
    }
    
    public ArrayList<String> test136GetDescriptAtWords(String descript){
        ArrayList<String> arrWordsFromDescript=new ArrayList();
        int startIndex=-1;
        //заменяю все \n на пробелы
        descript=descript.replaceAll("\n", " ").trim();
        //сокращаю колво пробелов до 1
        for(int i=0;i<descript.length()-1;i++){
            if(descript.charAt(i)==' '&&descript.charAt(i+1)==' '){                               
                descript=descript.substring(0, i)+descript.substring(i+1, descript.length());
                i--;
            }
        }                                 
        for(int i=0;i<descript.length();i++){    
            if(startIndex==-1&&(descript.charAt(i)==' '||i==0)){
                if(descript.charAt(i)==' '){
                    startIndex=i+1;
                    i++;
                }else{                                                                            
                    startIndex=i;
                }                                                                         
            }
            if(startIndex!=-1){
                if(descript.charAt(i)==' '){
                    arrWordsFromDescript.add(descript.substring(startIndex, i));
                    startIndex=i+1;
                }
                if(i+1>=descript.length()){
                    arrWordsFromDescript.add(descript.substring(startIndex, i+1));
                }                        
            }
        }        
        return arrWordsFromDescript;
    }
    
    public int test136quot(int i, StringBuffer bModifStr){
        int quotCount=0;
        if(i>0&&bModifStr.charAt(i-1)=='"'){
                quotCount++;
                while(quotCount>0){
                    i++;
                    if(bModifStr.charAt(i-1)=='"') quotCount--;
                }
        }
        return i;
    }
    
    public StringBuffer test136arrList(StringBuffer bModifStr){
        ArrayList<StringBuffer> bufStr=new ArrayList();
        int quotCount=0;
        int startIndex=0;        
        int startIndexTrim=0;
        for(int i=0;i<bModifStr.length();i++){
            if(bModifStr.charAt(i)=='"'&&quotCount==0){
                quotCount++;
                startIndex=i;
                bufStr.add(new StringBuffer(bModifStr.subSequence(startIndexTrim, i)));
                i++;
            }
            if(bModifStr.charAt(i)=='"'&&quotCount!=0){
                quotCount--;
                bufStr.add(new StringBuffer(bModifStr.subSequence(startIndex, i+1)));
                startIndexTrim=i+1;               
            }            
        }
        bufStr.add(new StringBuffer(bModifStr.subSequence(startIndexTrim,bModifStr.length())));        
        for(int i=0;i<bufStr.size();i++){
            if(bufStr.get(i).charAt(0)!='"'){
                bufStr.add(i, test136ForClear(bufStr.get(i)));
                bufStr.remove(i+1);
            }            
        }
        //System.out.println(bufStr.get(i));*/
        bModifStr=new StringBuffer("");
        for(int i=0;i<bufStr.size();i++){                       
            bModifStr=bModifStr.append(bufStr.get(i));
        }        
        return bModifStr;
    }
    
    public StringBuffer test136ForClear(StringBuffer bModifStr){        
        String sModifStr=new String(bModifStr);
        CharSequence oldChSeq="+";        
        CharSequence newChSeq=" ";
        sModifStr=sModifStr.replace(oldChSeq, newChSeq);             
        
        //2
        oldChSeq="|";        
        newChSeq=" | ";   
        sModifStr=sModifStr.replace(oldChSeq,newChSeq);
        oldChSeq="(";        
        newChSeq=" (";   
        sModifStr=sModifStr.replace(oldChSeq, newChSeq);
        oldChSeq=")";
        newChSeq=") ";
        sModifStr=sModifStr.replace(oldChSeq, newChSeq);
        //3
        for(int i=0;i<sModifStr.length()-1;i++){
            if(sModifStr.charAt(i)==' '&&sModifStr.charAt(i+1)==' '){                               
                sModifStr=sModifStr.substring(0, i)+sModifStr.substring(i+1, sModifStr.length());
                i--;
            }
        }                        
        oldChSeq="( ";
        newChSeq="(";
        sModifStr=sModifStr.replace(oldChSeq, newChSeq);
        oldChSeq=" )";
        newChSeq=")";
        sModifStr=sModifStr.replace(oldChSeq, newChSeq);
        oldChSeq=" | ";        
        newChSeq="|";   
        sModifStr=sModifStr.replace(oldChSeq,newChSeq);                
        bModifStr=new StringBuffer(sModifStr);
        return bModifStr;
    }
}
class Essence{
    public String essence;
    public boolean t_f;    
    public ArrayList<String> words=new ArrayList();
    public Essence(String essence){
        this.essence=essence;
    }
}